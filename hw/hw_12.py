"""
–†–∞–∑–±–æ—Ä HW 12 - –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ —Å 2 –∫–ª–∞—Å—Å–∞–º–∏ —Ä–∞–±–æ—Ç—ã —Å Mistral API
"""

MISTRAL_API_KEY = "rVpNURaWOqKRqEiaPJooogXfE8zJ5dgj"

# pip install mistralai
from typing import Any, List, Dict, Tuple, Optional, Union
from mistralai import Mistral
import base64
from abc import ABC, abstractmethod


class MistralRequestStrategy(ABC):
    """
    –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API Mistral.
    """

    @abstractmethod
    def send(self, *args: Any, **kwargs: Any) -> dict:
        pass


class TextRequest(MistralRequestStrategy):
    """
    –ö–ª–∞—Å—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API Mistral.
    """

    def __init__(self, api_key: str) -> None:
        self.api_key = api_key
        self.client = Mistral(api_key=self.api_key)

    def send(
        self, text: str, history: list = None, model: str = "mistral-large-latest"
    ) -> dict:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ API Mistral.
        """
        messages = []
        if history:
            messages.extend(
                [{"role": msg["role"], "content": msg["content"]} for msg in history]
            )

        messages.append({"role": "user", "content": text})

        response = self.client.chat.complete(model=model, messages=messages)

        result = {"role": "assistant", "content": response.choices[0].message.content}
        return result


class ImageRequest(MistralRequestStrategy):
    """
    –ö–ª–∞—Å—Å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤, –≤–∫–ª—é—á–∞—é—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.
    """

    def __init__(self, api_key: str) -> None:
        self.api_key = api_key
        self.client = Mistral(api_key=self.api_key)

    def __encode_image(self, image_path: str) -> str:
        """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç base64"""
        try:
            with open(image_path, "rb") as image_file:
                return base64.b64encode(image_file.read()).decode("utf-8")
        except FileNotFoundError:
            print(f"–û—à–∏–±–∫–∞: –§–∞–π–ª {image_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return ""
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
            return ""

    def send(
        self,
        text: str,
        image_path: str,
        history: list = None,
        model: str = "pixtral-12b-2409",
    ) -> dict:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞, –æ–±—ä–µ–¥–∏–Ω—è—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.
        """
        base64_image = self.__encode_image(image_path)

        messages = []
        if history:
            messages.extend(
                [{"role": msg["role"], "content": msg["content"]} for msg in history]
            )

        messages.append(
            {
                "role": "user",
                "content": [
                    {"type": "text", "text": text},
                    {
                        "type": "image_url",
                        "image_url": f"data:image/jpeg;base64,{base64_image}",
                    },
                ],
            }
        )

        chat_response = self.client.chat.complete(model=model, messages=messages)

        result = {
            "role": "assistant",
            "content": chat_response.choices[0].message.content,
        }
        return result


class MistralRequestContext:
    """
    –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Mistral API.
    –†–µ–∞–ª–∏–∑—É–µ—Ç –∫–ª–∞—Å—Å–∏—á–µ—Å–∫—É—é –≤–µ—Ä—Å–∏—é –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –°—Ç—Ä–∞—Ç–µ–≥–∏—è.
    """
    def __init__(self, api_key: str) -> None:
        self.api_key = api_key
        self.models = {"text": ["mistral-large-latest"], "image": ["pixtral-12b-2409"]}
        self.strategy: MistralRequestStrategy = None
        self.model: str = None
        self.history: List[Tuple[str, Dict]] = []
        
    def set_strategy(self, strategy_type: str) -> None:
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞.
        
        Args:
            strategy_type: "text" –∏–ª–∏ "image"
        """
        if strategy_type == "text":
            self.strategy = TextRequest(api_key=self.api_key)
        elif strategy_type == "image":
            self.strategy = ImageRequest(api_key=self.api_key)
        else:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {strategy_type}")
    
    def set_model(self, model: str) -> None:
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–¥–µ–ª—å –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.
        
        Args:
            model: –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ Mistral
        """
        strategy_type = "text" if isinstance(self.strategy, TextRequest) else "image"
        if model not in self.models[strategy_type]:
            raise ValueError(f"–ú–æ–¥–µ–ª—å {model} –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {strategy_type}")
        self.model = model
    
    def get_available_models(self) -> List[str]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.
        """
        if not self.strategy:
            return []
        strategy_type = "text" if isinstance(self.strategy, TextRequest) else "image"
        return self.models[strategy_type]
    
    def execute_request(self, text: str, image_path: Optional[str] = None) -> Dict:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.
        
        Args:
            text: —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
            image_path: –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é (—Ç–æ–ª—å–∫–æ –¥–ª—è ImageRequest)
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –æ—Ç–≤–µ—Ç–æ–º –æ—Ç API
        """
        if not self.strategy:
            raise ValueError("–°—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_message = {"role": "user", "content": text}
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏—Å—Ç–æ—Ä–∏—é –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        current_history = [msg for _, msg in self.history]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        if isinstance(self.strategy, ImageRequest) and image_path:
            response = self.strategy.send(
                text=text,
                image_path=image_path,
                history=current_history,
                model=self.model
            )
        elif isinstance(self.strategy, TextRequest):
            response = self.strategy.send(
                text=text,
                history=current_history,
                model=self.model
            )
        else:
            raise ValueError("–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞")
            
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        self.history.append((text, user_message))
        self.history.append((text, response))
        
        return response
    
    def clear_history(self) -> None:
        """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.history = []


class ChatFacade:
    """
    –§–∞—Å–∞–¥ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –µ–¥–∏–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç
    —Ä–∞–±–æ—Ç—É —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∑–∞–ø—Ä–æ—Å–æ–≤ Mistral.
    """

    def __init__(self, api_key: str) -> None:
        self.context = MistralRequestContext(api_key=api_key)
        
    def format_message(self, message: dict) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
        """
        emoji = "üë§" if message["role"] == "user" else "ü§ñ"
        return f"{emoji} {message['content']}\n"

    def __call__(self):
        """
        –ó–∞–ø—É—Å–∫ —Ñ–∞—Å–∞–¥–∞.
        """
        print("ü§ñ –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º. –î–ª—è –≤—ã—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ 'exit'")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∏ –º–æ–¥–µ–ª—å –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –±–µ—Å–µ–¥—ã
        self._setup_strategy_and_model()

        while True:
            text = input("\nüë§ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞: ")
            if text.lower() == "exit":
                print("ü§ñ –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
                
            if text.lower() == "change":
                self._setup_strategy_and_model()
                continue

            image_path = None
            if isinstance(self.context.strategy, ImageRequest):
                image_path = input("üë§ –í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é: ")

            try:
                response = self.context.execute_request(
                    text=text, 
                    image_path=image_path
                )
                # –ö—Ä–∞—Å–∏–≤–æ –≤—ã–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç
                print(self.format_message(response))
            except Exception as e:
                print(f"üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    
    def _setup_strategy_and_model(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        mode = input("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∑–∞–ø—Ä–æ—Å–∞ (1 - —Ç–µ–∫—Å—Ç–æ–≤—ã–π, 2 - —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º): ")
        
        strategy_type = "text" if mode == "1" else "image" if mode == "2" else None
        if not strategy_type:
            print("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
            strategy_type = "text"
            
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
        self.context.set_strategy(strategy_type)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏
        available_models = self.context.get_available_models()
        model_prompt = f"–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞ {available_models}: "
        model = input(model_prompt)
        
        try:
            self.context.set_model(model)
        except ValueError:
            default_model = available_models[0]
            print(f"‚ö†Ô∏è –í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default_model}")
            self.context.set_model(default_model)


# –ó–∞–ø—É—Å–∫ —Ñ–∞—Å–∞–¥–∞
chat_facade = ChatFacade(api_key=MISTRAL_API_KEY)
chat_facade()