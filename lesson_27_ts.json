[
    {
        "timestamp": [
            0.0,
            4.62
        ],
        "text": " добро утра здравствуйте"
    },
    {
        "timestamp": [
            24.24,
            165.18
        ],
        "text": " так илья я хотел сразу сказать что я обратную связь переписал. Теперь там не для Кирилла обратная связь, а для тебя, Кров, Илья. Сегодня я кашу. Так, одну секунду. Thank you. you Thank you. you Такая комбинированная тема у нас сегодня."
    },
    {
        "timestamp": [
            166.06,
            170.92
        ],
        "text": " Получается и генераторы, и, наверное, попробуем зацепить эти итераторы."
    },
    {
        "timestamp": [
            171.82,
            173.8
        ],
        "text": " Вы спросите, в чем разница?"
    },
    {
        "timestamp": [
            174.26,
            176.02
        ],
        "text": " Мы будем посмотреть как раз."
    },
    {
        "timestamp": [
            176.02,
            179.02
        ],
        "text": " У нас есть возможность сделать..."
    },
    {
        "timestamp": [
            182.02,
            184.96
        ],
        "text": " Описать логику итерации."
    },
    {
        "timestamp": [
            192.3,
            207.92
        ],
        "text": " описать логику итерации описать логику итерации что будет происходить на каждом круге цикла for ну давайте давайте тогда с самого начала у нас есть цикл for есть итерируемые объекты кто-то при разработке python определил что когда мы делаем какую-нибудь строку"
    },
    {
        "timestamp": [
            207.92,
            230.5
        ],
        "text": " мы получаем когда эту строку помещаем цикл мы получаем по очереди элементы этой строки буквы такая логика последнюю букву мы получили как-то происходит определение"
    },
    {
        "timestamp": [
            230.5,
            239.2
        ],
        "text": " цикла for что но это был последний объект дальше и траться не будет да то есть это была последняя"
    },
    {
        "timestamp": [
            239.2,
            246.08
        ],
        "text": " операция цикл заканчивается как както это происходит, передача такой информации."
    },
    {
        "timestamp": [
            246.4,
            274.94
        ],
        "text": " Когда у нас есть список, допустим, да, опять-таки тоже создатели Python определили, что у нас есть, ну, давайте, допустим, вот так, да, список опять таки как-то было определено что при каждой итерации в цикле у нас получается из"
    },
    {
        "timestamp": [
            274.94,
            285.76
        ],
        "text": " списка добывается один элемент при этом как то ну такой опции не до провернуть цикл for в обратную сторону, типа итерация назад."
    },
    {
        "timestamp": [
            294.04,
            295.24
        ],
        "text": " Ну, то есть у нас цикл запущен, и мы получаем поштучно элементы, пока они не закончатся."
    },
    {
        "timestamp": [
            298.3,
            302.78
        ],
        "text": " Мы получили последний элемент и больше ничего не получаем. Эта логика описана, ее можно, собственно, написать на OOP."
    },
    {
        "timestamp": [
            418.82,
            432.82
        ],
        "text": " ее можно, собственно, написать на OOP. Но перед тем, как ее писать на OOP, мы в целом-то можем функциональным стилем описать объекты генератора. В принципе, у нас есть такие объекты уже знакомые, а не нам. Это служебные объекты python давайте я их опишу Case values items. кейс вейлиус айтенс на эти коллекции методов словарей они дают Range дает тоже генератор. Map дает также генератор. И фильтр дает также генератор. И, собственно, что есть вообще такое генератор? Чем это будет отличаться от коллекции? Мы как раз смотрели на строчники, на эти мэпы, фильтры, и результаты их работы мы превращали в списки. Ну, в целом, это можно было превращать из кортежа или во множество, там уже как захотите, да, зачем эту сложность было делать? Неужели нельзя было бы сразу просто список отдать? Так вот, разница в том как раз, что генератор, он не обсчитывается целиком."
    },
    {
        "timestamp": [
            452.18,
            453.94
        ],
        "text": " Означает, что если вы делаете генератор от 1 до, спасибо Роскомнадзору, я знаю это число благодаря штрафам Google, у дециллиона, от 1 до числа с огромным количеством нулей."
    },
    {
        "timestamp": [
            457.16,
            457.96
        ],
        "text": " Если вы делаете генератор, он не будет это рассчитывать."
    },
    {
        "timestamp": [
            462.18,
            462.68
        ],
        "text": " То есть он будет это рассчитывать только в момент обращения к нему."
    },
    {
        "timestamp": [
            464.56,
            464.76
        ],
        "text": " Вы говорите, дай мне следующее число."
    },
    {
        "timestamp": [
            465.56,
            465.88
        ],
        "text": " Он дает вам 2. Дай мне следующее число. Он дает говорите, дай мне следующее число. Он дает вам 2."
    },
    {
        "timestamp": [
            466.78,
            466.84
        ],
        "text": " Дай мне следующее число."
    },
    {
        "timestamp": [
            467.48,
            468.06
        ],
        "text": " Он дает вам 3."
    },
    {
        "timestamp": [
            468.98,
            469.08
        ],
        "text": " Дай мне следующее число."
    },
    {
        "timestamp": [
            471.06,
            471.76
        ],
        "text": " Он вам дает 1 миллиард 98."
    },
    {
        "timestamp": [
            472.66,
            472.86
        ],
        "text": " Дай мне следующее."
    },
    {
        "timestamp": [
            473.9,
            474.66
        ],
        "text": " 1 миллиард 99."
    },
    {
        "timestamp": [
            479.54,
            479.66
        ],
        "text": " И так вы сможете перебрать бесконечную последовательность,"
    },
    {
        "timestamp": [
            480.14,
            484.64
        ],
        "text": " на самом деле. То есть она не будет ограничена ничем."
    },
    {
        "timestamp": [
            485.18,
            492.9
        ],
        "text": " Если вы закажете список чисел такой, то вы будете ограничены оперативной памятью вашего компьютера."
    },
    {
        "timestamp": [
            493.82,
            499.44
        ],
        "text": " И даже не всей, а той, что Windows выделила Python."
    },
    {
        "timestamp": [
            500.12,
            506.28
        ],
        "text": " Для Python 64-битного это, может быть, достаточно большие объемы."
    },
    {
        "timestamp": [
            507.44,
            510.36
        ],
        "text": " Допустим, если у вас 16 гигабайт оперативной памяти,"
    },
    {
        "timestamp": [
            510.36,
            511.42
        ],
        "text": " это легко может быть."
    },
    {
        "timestamp": [
            512.14,
            515.82
        ],
        "text": " Windows ужмется немножечко, себе займет 3-4 гигабайта,"
    },
    {
        "timestamp": [
            515.96,
            516.98
        ],
        "text": " остальное отдаст под Python."
    },
    {
        "timestamp": [
            517.48,
            523.26
        ],
        "text": " И вы займете своим бесконечно огромным числом 12-13 гигабайт."
    },
    {
        "timestamp": [
            523.84,
            531.24
        ],
        "text": " Если у вас 32 гигабайта, вы займете там ну 28 допустим у нас вот 24 по"
    },
    {
        "timestamp": [
            531.24,
            540.22
        ],
        "text": " моему кого-то рекорду или или или даже больше 28 ну прям много но не влезет туда все равно это число"
    },
    {
        "timestamp": [
            540.22,
            570.48
        ],
        "text": " а то есть огромные огромные числа огромные массивы дан, они все равно вашу оперативную память влазить не будут. В большем случае. То есть это история про оптимизацию и про те случаи, когда данные не нужны все."
    },
    {
        "timestamp": [
            570.9,
            571.6
        ],
        "text": " Здесь и сейчас."
    },
    {
        "timestamp": [
            572.82,
            574.62
        ],
        "text": " Мы можем произвести этот эксперимент."
    },
    {
        "timestamp": [
            575.26,
            576.98
        ],
        "text": " Правда, будьте осторожны."
    },
    {
        "timestamp": [
            578.56,
            583.1
        ],
        "text": " У меня, допустим, он вызывает, я не помню, как точно ошибка называется,"
    },
    {
        "timestamp": [
            583.28,
            586.04
        ],
        "text": " либо memory error, либо out of memory error."
    },
    {
        "timestamp": [
            586.3,
            587.76
        ],
        "text": " То есть нехватка оперативной памяти."
    },
    {
        "timestamp": [
            588.54,
            592.52
        ],
        "text": " У одного студента на прошлом занятии недавно компьютер намертво повис."
    },
    {
        "timestamp": [
            592.62,
            594.42
        ],
        "text": " Ну, пришлось перезагрузаться."
    },
    {
        "timestamp": [
            595.38,
            598.0
        ],
        "text": " Так что произведем один эксперимент."
    },
    {
        "timestamp": [
            599.0,
            601.36
        ],
        "text": " Закажем огромный рейндж."
    },
    {
        "timestamp": [
            602.74,
            638.12
        ],
        "text": " И закажем его в двух вариантах. Собственно, какой у нас вариант есть? Давайте сделаем такую... Ну, тут уже насколько хватит у вас терпения нули набирать."
    },
    {
        "timestamp": [
            638.12,
            640.0
        ],
        "text": " Можете через скопирование сделать."
    },
    {
        "timestamp": [
            641.06,
            645.9
        ],
        "text": " Нижнее подчеркивание – это просто визуальное оформление,"
    },
    {
        "timestamp": [
            646.44,
            649.42
        ],
        "text": " это целочисленное значение с большим количеством нулей."
    },
    {
        "timestamp": [
            649.68,
            654.86
        ],
        "text": " Можно было в математическую библиотеку подпрячь или через степени это обозначить,"
    },
    {
        "timestamp": [
            654.86,
            662.62
        ],
        "text": " или еще как-то, но я просто так для наглядности это описал через большое количество нулей."
    },
    {
        "timestamp": [
            698.28,
            701.1
        ],
        "text": " Это я писал через большое количество нулей. То есть нижнее подчеркивание – это просто визуал для разделения разрядности числа. Можно с ним, можно без них. Это по-прежнему целочисленная интеджер. И мы делаем range, говорим, что хотим список чисел от нуля до этого числа. Значит, произойдет две вещи."
    },
    {
        "timestamp": [
            701.54,
            705.22
        ],
        "text": " Создаст объект-генератор здесь."
    },
    {
        "timestamp": [
            705.86,
            706.92
        ],
        "text": " Это range."
    },
    {
        "timestamp": [
            708.78,
            710.36
        ],
        "text": " Он ленив сам по себе."
    },
    {
        "timestamp": [
            711.84,
            712.06
        ],
        "text": " То есть это будет просто объект."
    },
    {
        "timestamp": [
            717.62,
            718.78
        ],
        "text": " Он не будет содержать в себе экземпляров чисел."
    },
    {
        "timestamp": [
            719.3,
            719.32
        ],
        "text": " Или пишет."
    },
    {
        "timestamp": [
            720.94,
            721.78
        ],
        "text": " Я, пожалуй, посмотрел за вашим цифрами."
    },
    {
        "timestamp": [
            722.38,
            723.12
        ],
        "text": " Окей."
    },
    {
        "timestamp": [
            729.96,
            730.86
        ],
        "text": " Он не будет содержать в себе вот этого количества экземпляров класса число."
    },
    {
        "timestamp": [
            732.4,
            736.36
        ],
        "text": " Не будет этого."
    },
    {
        "timestamp": [
            742.4,
            742.76
        ],
        "text": " Но когда мы говорим список, мы заставляем его полностью обсчитать все,"
    },
    {
        "timestamp": [
            751.04,
            752.48
        ],
        "text": " создать все эти числа, записать их объект в оперативную память и дать нам список чисел."
    },
    {
        "timestamp": [
            753.62,
            764.18
        ],
        "text": " В этом разница. То есть если мы делаем просто range, мы получаем обещание, которое можно потихонечку востребовать по штучному."
    },
    {
        "timestamp": [
            764.44,
            765.32
        ],
        "text": " которые можно потихонечку востребовать поштучно."
    },
    {
        "timestamp": [
            769.64,
            769.78
        ],
        "text": " Когда мы делаем список рейндж, мы получаем, ну как бы мы говорим,"
    },
    {
        "timestamp": [
            774.02,
            774.52
        ],
        "text": " что вообще-то ты все там обсчитай и отдай."
    },
    {
        "timestamp": [
            778.5,
            778.56
        ],
        "text": " Ну, здесь можно представить это, как вы заняли деньги другу,"
    },
    {
        "timestamp": [
            783.32,
            783.56
        ],
        "text": " и у вас есть две опции, чтобы он отдавал вам каждый месяц по чуть-чуть,"
    },
    {
        "timestamp": [
            847.5,
            856.08
        ],
        "text": " или каждый день по чуть-чуть, по 100 рублей, или же чтобы он накопил 2 миллиарда денежек и отдал вам сразу мешок принес. Вот в этом разница. Я это запущу. Сейчас давайте я виртуальное движение оптикирую. мы получаем принт леда принта не дойдет здесь я получаю вот такую штуку overflow error python int to large to convert to see ss t короче он не может но поэтому написано си и синий воспринял короче вероятно не может обживать такое число большое у нас такое сключение возникло но макия какое-то количество нулей срежу давайте"
    },
    {
        "timestamp": [
            856.08,
            874.22
        ],
        "text": " ну так да допустим еще раз попробую еще до пока не может ну давайте еще так свежим и получаем memory но тут из ребят"
    },
    {
        "timestamp": [
            874.22,
            887.26
        ],
        "text": " получил фриз системы и пришлось hard reset делать ну вот таких два exception можно получить то есть вот это вообще обрабатываться не начало а"
    },
    {
        "timestamp": [
            887.26,
            898.06
        ],
        "text": " вот это просто не 32 гигабайта оперативки моей не хватило чтобы это переварить нехватка памяти"
    },
    {
        "timestamp": [
            898.06,
            935.18
        ],
        "text": " что делать что делать когда у вас лог файл 5 гигабайт на сервере лежит и оперативки свободны 500 мегабайт? И вы просто не сможете открыть на чтение. Просто он не влезет, весь этот объем данных не влезет вам в оперативку, чтобы, допустим, в этом лог-файле что-то найти. К примеру. Проанализировать какие-то записи найти вы делаете range просто делайте range"
    },
    {
        "timestamp": [
            943.96,
            944.62
        ],
        "text": " То есть вот это я говорю отдай все."
    },
    {
        "timestamp": [
            947.72,
            948.64
        ],
        "text": " А вот это я говорю отдай мне обещание отдать все."
    },
    {
        "timestamp": [
            951.86,
            960.4
        ],
        "text": " И собственно в цикле я могу это обещание взыскивать."
    },
    {
        "timestamp": [
            965.64,
            969.44
        ],
        "text": " То есть Range передает объект в генератор, подготовленный для работы."
    },
    {
        "timestamp": [
            980.7,
            986.64
        ],
        "text": " Объект-генератор – это означает, что с него можно штучно востребовать. И я буду получать 0, 1, 2, 3, 4."
    },
    {
        "timestamp": [
            987.12,
            990.28
        ],
        "text": " И так пока у нас число не закончится."
    },
    {
        "timestamp": [
            990.88,
            994.76
        ],
        "text": " И в оперативной памяти, так как это оперативный перебор,"
    },
    {
        "timestamp": [
            995.16,
            1000.3
        ],
        "text": " будет существовать только одно число за раз."
    },
    {
        "timestamp": [
            1001.6,
            1002.8
        ],
        "text": " Одно число за раз."
    },
    {
        "timestamp": [
            1003.06,
            1004.64
        ],
        "text": " Один какой-то файл."
    },
    {
        "timestamp": [
            1004.86,
            1011.04
        ],
        "text": " Один запрос в один вопрос по api одна строка очень"
    },
    {
        "timestamp": [
            1011.04,
            1029.34
        ],
        "text": " жирного документа или же тексты документа все это про оптимизацию затрат памяти. Я запускаю эту штуку, и она работает."
    },
    {
        "timestamp": [
            1030.14,
            1033.08
        ],
        "text": " Она будет работать медленнее, возможно, немножко,"
    },
    {
        "timestamp": [
            1033.08,
            1037.84
        ],
        "text": " чем если бы я заказал сразу список из 100 миллиардов."
    },
    {
        "timestamp": [
            1039.18,
            1042.44
        ],
        "text": " При этом он даже мог бы влезть в неоперативную память."
    },
    {
        "timestamp": [
            1043.32,
            1046.72
        ],
        "text": " То есть эта штука немножко медленнее работает но она"
    },
    {
        "timestamp": [
            1046.72,
            1152.24
        ],
        "text": " работает и затрат памяти у нее в радикальното закончится работу вероятно но я думаю что ждать мы запись бы не шла то еще бы это шло был быстрее перебор шел бы. Ну, и так зайдет. Так, я останавливаю это через Ctrl-C. Ну, если вы опасаетесь, что компьютер надо будет перезагружать, можете эксперимент с листом не делать, а, это оно. Это оно. Можно без листа попробовать цикл да это тогда будет работать"
    },
    {
        "timestamp": [
            1158.24,
            1167.04
        ],
        "text": " чем они хороши то что они могут передаваться из одного в другой они могут передаваться из одного в другой."
    },
    {
        "timestamp": [
            1169.26,
            1169.72
        ],
        "text": " Они могут передаваться из одного в другой."
    },
    {
        "timestamp": [
            1176.28,
            1176.78
        ],
        "text": " То есть вы можете передать один генератор в другой, в третий, в четвертый."
    },
    {
        "timestamp": [
            1177.82,
            1178.34
        ],
        "text": " Что я имею в виду?"
    },
    {
        "timestamp": [
            1180.5,
            1192.28
        ],
        "text": " Допустим, у нас есть вот эта последовательность, и мы хотим отфильтровать ее, а потом отестерить, превратить в строки."
    },
    {
        "timestamp": [
            1193.22,
            1199.02
        ],
        "text": " Допустим, мы хотим в этой последовательности выводить не все числа, а только четные."
    },
    {
        "timestamp": [
            1200.14,
            1205.92
        ],
        "text": " И также, когда они выводятся, мэпом их обрабатывать, превращать в строки."
    },
    {
        "timestamp": [
            1206.36,
            1207.94
        ],
        "text": " И это поместить в цикл."
    },
    {
        "timestamp": [
            1209.4,
            1210.7
        ],
        "text": " Можно ли это будет сделать?"
    },
    {
        "timestamp": [
            1211.02,
            1211.18
        ],
        "text": " Да."
    },
    {
        "timestamp": [
            1211.18,
            1218.78
        ],
        "text": " То есть, так как вот эти служебные вещи, они все являются генератор-обжектами,"
    },
    {
        "timestamp": [
            1219.4,
            1244.66
        ],
        "text": " по сути, мы можем полученный генератор-обжект в одном месте передать в другое, а потом передать в третье. То есть мы можем загенерировать range суперогромного числа, передать это в фильтр, чтобы получать числа кратные десяти, числа четные, еще какие-нибудь числа."
    },
    {
        "timestamp": [
            1241.48,
            1242.92
        ],
        "text": " Четные."
    },
    {
        "timestamp": [
            1244.66,
            1247.14
        ],
        "text": " Еще какие-нибудь числа."
    },
    {
        "timestamp": [
            1253.74,
            1254.28
        ],
        "text": " И потом еще то, что получаем, обрабатывать какой-то функцией."
    },
    {
        "timestamp": [
            1256.32,
            1257.78
        ],
        "text": " Ну, допустим, я привел это."
    },
    {
        "timestamp": [
            1260.12,
            1261.38
        ],
        "text": " Переощать строку."
    },
    {
        "timestamp": [
            1263.76,
            1264.76
        ],
        "text": " И все это потом выводить на экран."
    },
    {
        "timestamp": [
            1268.54,
            1269.7
        ],
        "text": " Ну, или востребовать для какой-то логики поштучно."
    },
    {
        "timestamp": [
            1271.54,
            1274.04
        ],
        "text": " Без проблем мы можем это сделать."
    },
    {
        "timestamp": [
            1275.06,
            1277.06
        ],
        "text": " Можем описать. Это все будет доступно."
    },
    {
        "timestamp": [
            1282.16,
            1283.54
        ],
        "text": " Так, Иван отметился."
    },
    {
        "timestamp": [
            1284.12,
            1306.56
        ],
        "text": " Ну, у нас чекпоинт в любом случае будет так что желательно будет это набрать но главное не превращайте это в список цикл я отодвигаю значит давайте здесь я обознач, что я хочу обработать этот фильтр."
    },
    {
        "timestamp": [
            1331.6,
            1332.26
        ],
        "text": " Значит, четные числа равно фильтр лямбда х, х без остатка на 2 равно 0."
    },
    {
        "timestamp": [
            1335.14,
            1335.92
        ],
        "text": " То есть это лямбда, которая посчитает четные числа."
    },
    {
        "timestamp": [
            1339.06,
            1342.3
        ],
        "text": " А это предыдущий генератор. То есть я фильтр передаю генератор."
    },
    {
        "timestamp": [
            1342.3,
            1342.88
        ],
        "text": " фильтр передаю генератор."
    },
    {
        "timestamp": [
            1344.24,
            1344.3
        ],
        "text": " То есть я, ну,"
    },
    {
        "timestamp": [
            1344.84,
            1347.1
        ],
        "text": " типа, знаете,"
    },
    {
        "timestamp": [
            1347.86,
            1348.24
        ],
        "text": " ну, я не знаю там,"
    },
    {
        "timestamp": [
            1350.34,
            1352.3
        ],
        "text": " я должен денег Илье, Илья должен денег Руслану, а Руслан должен денег"
    },
    {
        "timestamp": [
            1352.3,
            1353.04
        ],
        "text": " Степану."
    },
    {
        "timestamp": [
            1353.04,
            1354.68
        ],
        "text": " Да, я..."
    },
    {
        "timestamp": [
            1354.68,
            1357.2
        ],
        "text": " И Степан говорит,"
    },
    {
        "timestamp": [
            1357.28,
            1358.56
        ],
        "text": " слушай, ну, тебе Руслан отдаст."
    },
    {
        "timestamp": [
            1358.78,
            1360.42
        ],
        "text": " А Руслан говорит, слушай, ну, тебе Илья отдаст."
    },
    {
        "timestamp": [
            1360.52,
            1363.2
        ],
        "text": " А Илья говорит, ну, короче, вам Владимир всем отдаст"
    },
    {
        "timestamp": [
            1363.2,
            1364.24
        ],
        "text": " эти деньги."
    },
    {
        "timestamp": [
            1364.78,
            1365.0
        ],
        "text": " И все. Передаем друг другу долговые расписки. я отдаст. Алия говорит, ну, короче, вам Владимир всем отдаст эти деньги."
    },
    {
        "timestamp": [
            1365.72,
            1366.62
        ],
        "text": " И все."
    },
    {
        "timestamp": [
            1368.12,
            1368.64
        ],
        "text": " Передаем друг другу долговые расписки."
    },
    {
        "timestamp": [
            1369.9,
            1370.58
        ],
        "text": " Так и здесь."
    },
    {
        "timestamp": [
            1372.92,
            1374.06
        ],
        "text": " Бесконечное число не будет"
    },
    {
        "timestamp": [
            1374.06,
            1374.74
        ],
        "text": " обсчитываться."
    },
    {
        "timestamp": [
            1375.88,
            1377.84
        ],
        "text": " Оно будет передаваться поштучно."
    },
    {
        "timestamp": [
            1378.16,
            1380.16
        ],
        "text": " Я отдаю рубль, и этот рубль"
    },
    {
        "timestamp": [
            1380.16,
            1382.28
        ],
        "text": " пошел между ребятами."
    },
    {
        "timestamp": [
            1383.8,
            1391.76
        ],
        "text": " Каждый друг другу этот рубль отдает получается range отдаст число фильтр"
    },
    {
        "timestamp": [
            1391.76,
            1452.9
        ],
        "text": " скажет окей эта штука не проходит фильтрацию я его не беру 0 допустим нет не берем один не берем. Один, не берем. Два. Четная, четная. Двоечка проходит. И следующее я хочу, допустямбду x стр x и добавить сюда допустим надпись число"
    },
    {
        "timestamp": [
            1461.9,
            1467.98
        ],
        "text": " это как я отдавая каждый рубль говорить смотри вот этиотри, вот я тебе рубль отдал, вот я тебе еще один рубль отдал."
    },
    {
        "timestamp": [
            1467.98,
            1473.56
        ],
        "text": " В общем, какую-то обработку сделаю на каждой последовательности."
    },
    {
        "timestamp": [
            1474.66,
            1476.64
        ],
        "text": " Всего получается у нас следующее."
    },
    {
        "timestamp": [
            1476.94,
            1479.98
        ],
        "text": " У нас есть минимальное значение, максимальное значение."
    },
    {
        "timestamp": [
            1489.48,
            1509.54
        ],
        "text": " у нас есть долговая расписка создания объекта генератора который обещает отд этой да вот эта штука но типа вот этой когда я"
    },
    {
        "timestamp": [
            1509.54,
            1520.04
        ],
        "text": " буду вот эту штуку помещу в цикл я буду получать строки формата 2 число 4 число 6 число 8 число 10"
    },
    {
        "timestamp": [
            1520.04,
            1527.92
        ],
        "text": " число и далее да только четные потому что здесь число добавляется здесь добавляется четность а"
    },
    {
        "timestamp": [
            1527.92,
            1534.7
        ],
        "text": " здесь они генерируются и по-прежнему она не будет занимать много места оперативной памяти она будет"
    },
    {
        "timestamp": [
            1534.7,
            1539.62
        ],
        "text": " очень компактный давайте просто попробуем"
    },
    {
        "timestamp": [
            1553.0,
            1558.52
        ],
        "text": " хотя это уже не совсем нам будет ну ладно быстро слишком идет давайте сделаем"
    },
    {
        "timestamp": [
            1561.4,
            1568.04
        ],
        "text": " при тормозим его."
    },
    {
        "timestamp": [
            1571.6,
            1574.6
        ],
        "text": " То есть оно раз в секунду выдает значение какое-то."
    },
    {
        "timestamp": [
            1575.42,
            1583.42
        ],
        "text": " Вот так, да?"
    },
    {
        "timestamp": [
            1584.3,
            1587.44
        ],
        "text": " Опс. Так. Ну и вот оно пошло"
    },
    {
        "timestamp": [
            1587.44,
            1618.32
        ],
        "text": " пробел неплохо было бы добавить То есть это не один объект, это один объект, который ссылается на другой объект, который ссылается на третий объект, и все они генераторы."
    },
    {
        "timestamp": [
            1625.44,
            1625.48
        ],
        "text": " когда цикл for говорит, дай мне следующую выплату,"
    },
    {
        "timestamp": [
            1630.7,
            1632.58
        ],
        "text": " востребует он у string nums."
    },
    {
        "timestamp": [
            1637.48,
            1638.18
        ],
        "text": " Здесь применяется map к каждому элементу последовательности вот этой, even nums."
    },
    {
        "timestamp": [
            1638.64,
            1642.22
        ],
        "text": " Здесь применяется фильтр каждой последовательности range nums."
    },
    {
        "timestamp": [
            1642.3,
            1645.52
        ],
        "text": " Range nums такое, ну окей, хотите следующее число,"
    },
    {
        "timestamp": [
            1645.64,
            1646.56
        ],
        "text": " вот вам единичка."
    },
    {
        "timestamp": [
            1647.1,
            1649.78
        ],
        "text": " Фильтр единичку откидывает, вот вам двоечка."
    },
    {
        "timestamp": [
            1650.08,
            1653.72
        ],
        "text": " Двоечка проходит через фильтр, попадает сюда,"
    },
    {
        "timestamp": [
            1654.16,
            1657.02
        ],
        "text": " производит обработку, и мы видим два числа."
    },
    {
        "timestamp": [
            1657.82,
            1660.12
        ],
        "text": " Ну и дальше так в чётные числа видим поштучно."
    },
    {
        "timestamp": [
            1660.98,
            1662.38
        ],
        "text": " Так, Илья, да, слушаю."
    },
    {
        "timestamp": [
            1663.42,
            1667.3
        ],
        "text": " А вот sleep меня не распознает."
    },
    {
        "timestamp": [
            1667.3,
            1670.62
        ],
        "text": " А он импортирован?"
    },
    {
        "timestamp": [
            1670.78,
            1673.22
        ],
        "text": " Я просто здесь вот на 33-й строке импорт сделал."
    },
    {
        "timestamp": [
            1673.98,
            1675.18
        ],
        "text": " From time import sleep."
    },
    {
        "timestamp": [
            1676.5,
            1677.44
        ],
        "text": " Ага, все, понял."
    },
    {
        "timestamp": [
            1678.62,
            1681.24
        ],
        "text": " Можно сюда, кстати, дробное передать."
    },
    {
        "timestamp": [
            1682.06,
            1683.64
        ],
        "text": " Полсекунды, по-моему, тоже можно."
    },
    {
        "timestamp": [
            1706.9,
            1716.5
        ],
        "text": " Вроде бы, если не ошибаюсь. Ага, можно. Пошустрее идут они. Давайте сделаем отметку. Попробуйте набрать, запустить, получить сериюию вот эту серию с перепиской"
    },
    {
        "timestamp": [
            1719.56,
            1727.26
        ],
        "text": " так я степан катерина Артем. А чем вы останавливали его?"
    },
    {
        "timestamp": [
            1728.14,
            1767.52
        ],
        "text": " Контр-Анс. В терминале контр-Анс это остановка любых выполняемых скриптов. Вообще эти штуки достаточно удобны в плане оптимизации памяти. И, собственно, мы сейчас посмотрим, как свои генераторы писать. Ну вот вам надо, допустим, иметь возможность итеративно получать какую-то штуку."
    },
    {
        "timestamp": [
            1769.76,
            1770.52
        ],
        "text": " Любую."
    },
    {
        "timestamp": [
            1771.0,
            1774.24
        ],
        "text": " Может быть, вы экземпляры датаклассов хотите получать поштучно."
    },
    {
        "timestamp": [
            1774.38,
            1775.38
        ],
        "text": " Может, еще что-то."
    },
    {
        "timestamp": [
            1776.14,
            1784.02
        ],
        "text": " И вы просто пишете функцию генератор, которая не делает return, а делает возврат обещания."
    },
    {
        "timestamp": [
            1784.04,
            1785.42
        ],
        "text": " Не делает return, а делает возврат обещания."
    },
    {
        "timestamp": [
            1799.64,
            1800.68
        ],
        "text": " И потом засовываете результаты работы в цикл и получаете не список экземпляров дата-класса город, состоящий из миллиона объектов, а получаете поштучно."
    },
    {
        "timestamp": [
            1812.0,
            1970.08
        ],
        "text": " Города поштучно, шаг за шагом и вы можете обработать просто огромнейшие массив другой оператор использоваться. Минутку-две, чтобы ребята успели написать, кто еще пишет. you you Gracias. Криво Илья еще, Иван, Ренат и Максим присылались. Отлично. ошибку не должен не должен выдавать а какая ошибка"
    },
    {
        "timestamp": [
            1980.5,
            1983.5
        ],
        "text": " а это ошибка из-за остановки"
    },
    {
        "timestamp": [
            1983.64,
            1987.1
        ],
        "text": " А, это ошибка из-за остановки."
    },
    {
        "timestamp": [
            1992.76,
            1993.88
        ],
        "text": " То, что мы перерываем работу программы через, ну, таким вот способом."
    },
    {
        "timestamp": [
            1995.2,
            1996.0
        ],
        "text": " Так что, ну, у меня тоже."
    },
    {
        "timestamp": [
            2036.78,
            2050.86
        ],
        "text": " Это нормально. есть еще zip на котором не смотрели и и numerate и кстати реверс который тоже мы смотрели я их могу в целом-то. ZIP сшивает. Короче, это такая интересная штука, на самом деле. Она редко используется, но когда она нужна, вы просто радуетесь, что она в языке есть. или за четыре последних не вспомню чтобы я прямо ну как рады говорят это история про то что когда"
    },
    {
        "timestamp": [
            2050.86,
            2056.86
        ],
        "text": " она нужна вспомните вспоминаете что она есть и вы просто работе что ее кто-то в языке описал"
    },
    {
        "timestamp": [
            2056.86,
            2069.06
        ],
        "text": " эта возможность сшить допустим два два списка у вас есть какой-то список 1 и список 2 и вы хотите их сшить и получить что-то что можно"
    },
    {
        "timestamp": [
            2069.06,
            2090.08
        ],
        "text": " будет превратить словарь она тоже отдает генератор на самом деле и номерейт я думаю что вы помните что это я забыл его оформить сюда это допустим вы говорите цикл по и номерейт список и"
    },
    {
        "timestamp": [
            2090.08,
            2121.52
        ],
        "text": " получаете один банан два яблока 3 апельсин а то есть это возможность дать пары индекс и значение значения. Давайте, в принципе, я вот эти подписи тоже добавлю. Вот эта штука прикольная, если вам нужно соединить две коллекции вместе и потенциально иметь возможность их потом превратить в словарь."
    },
    {
        "timestamp": [
            2129.24,
            2139.26
        ],
        "text": " их потом превратить словарь кейс редкий но она учитывает то что одна коллекция может быть длиннее другой допустим у вас есть банан яблоко апельсин и купил не купил забыл и вы хотите это сшить вместе"
    },
    {
        "timestamp": [
            2139.26,
            2146.26
        ],
        "text": " и сделать из этого словарь где ключи будут и фрукты, а значение статус покупки."
    },
    {
        "timestamp": [
            2147.32,
            2150.48
        ],
        "text": " И zip идеально для этого подходит, то есть вам не надо никакую логику писать,"
    },
    {
        "timestamp": [
            2150.58,
            2152.66
        ],
        "text": " вы можете с помощью zip их вместе шить."
    },
    {
        "timestamp": [
            2153.08,
            2156.02
        ],
        "text": " И вот zip как раз тоже отдает генератору, object."
    },
    {
        "timestamp": [
            2158.36,
            2168.46
        ],
        "text": " То есть можно засунуть это в zip, потом засунуть это в mapэп обработать одно обработать другое ну и на выходе конце концов"
    },
    {
        "timestamp": [
            2168.46,
            2178.42
        ],
        "text": " получить данные или вообще даже через генераторные выражения записать это построчно файл чтение запись"
    },
    {
        "timestamp": [
            2178.42,
            2419.8
        ],
        "text": " мы сейчас посмотрим обязательно то есть у нас есть опция как раз-таки читать данные и записывать их построчно. Через вот такие вот выражения. Что еще здесь? Реверс вообще ни разу не пользовался. Давайте внесем тоже. Тоже оказывается генератор. Так, я вижу, что уже, наверное, все отметились, кто делал. Алексей еще отметился. Хорошо. Мы можем... Так, давайте я, наверное, comment comment сделаю. А, я уже запушить успел да ладно то что коллекцию сити с не могу найти сити сайт информации сити с джейсом вот он где-то в каком-то из уроков, возможно, она застряла. Ну ладно, мы можем и на Марвеле потренироваться. Там-то суть в итеративном подходе. Хотя давайте я список городов запишу. Думаю, как лучше. Смысл в том, что мы можем делать построчное чтение и построчную запись. То есть мы нигде не будем хранить с вами... Нигде не будем хранить все. В принципе, может быть, нам даже и коллекции никакие не нужны. То есть мы можем генерировать бесконечную последовательность данных, обрабатывать их, фильтровать их, обрабатывать их и записывать их в документ в таком вот режиме. Продолжение следует... Ну, при этом какой-то стоп не нужен, наверное, будет какое число давайте до миллиона допишем"
    },
    {
        "timestamp": [
            2445.56,
            2448.92
        ],
        "text": " Получается раз, два, три, раз, два, три, пробел число. Главное не промахнуться. Такое значение. Я хочу в текстовый документ записывать данные построчно, которые я сам же генерирую. Пока не дойду до миллионной строки."
    },
    {
        "timestamp": [
            2450.14,
            2453.92
        ],
        "text": " With open nums text."
    },
    {
        "timestamp": [
            2455.76,
            2456.56
        ],
        "text": " Так."
    },
    {
        "timestamp": [
            2458.56,
            2460.58
        ],
        "text": " File for nums.num."
    },
    {
        "timestamp": [
            2461.12,
            2463.52
        ],
        "text": " If nums to pit and break, file write nums."
    },
    {
        "timestamp": [
            2463.52,
            2464.38
        ],
        "text": " Плюс 3-0 строки."
    },
    {
        "timestamp": [
            2527.0,
            2527.64
        ],
        "text": " Я вот это запущу, пока не запускаете произведем эксперимент эксперимент будет удачный что-то быстро. Ну, вероятно, быстро, потому что не пришлось печатать этот терминал, я предположу. Процессор мощный, дисковая система хорошая, создаешь не чуть быстрее, поэтому все это... Значений не так много, это всего 500 тысяч строк. На самом деле, для бытового компьютера обычного это не так уж и много. Для сервера, наверное, это было бы тяжеловато, может быть. Но тоже он бы справился. Запись построчная. Если бы мы делали это через оперативную память,"
    },
    {
        "timestamp": [
            2529.16,
            2529.58
        ],
        "text": " поместили бы весь список,"
    },
    {
        "timestamp": [
            2531.78,
            2531.92
        ],
        "text": " то не знаю."
    },
    {
        "timestamp": [
            2533.48,
            2533.7
        ],
        "text": " Я думаю, что здесь нормально было."
    },
    {
        "timestamp": [
            2535.68,
            2536.48
        ],
        "text": " 500 тысяч чисел не так много."
    },
    {
        "timestamp": [
            2537.44,
            2538.78
        ],
        "text": " 500 тысяч строк."
    },
    {
        "timestamp": [
            2540.46,
            2540.5
        ],
        "text": " Гигабайт, может быть, мы там заняли бы,"
    },
    {
        "timestamp": [
            2541.36,
            2543.48
        ],
        "text": " может быть, меньше еще."
    },
    {
        "timestamp": [
            2544.12,
            2545.3
        ],
        "text": " Окей. Значит, но в общем. Окей."
    },
    {
        "timestamp": [
            2546.56,
            2547.44
        ],
        "text": " Значит, это будет работать."
    },
    {
        "timestamp": [
            2550.7,
            2551.12
        ],
        "text": " Попробуйте это записать."
    },
    {
        "timestamp": [
            2554.96,
            2555.28
        ],
        "text": " Пока что не отмечайтесь, мы сейчас будем это читать обратно."
    },
    {
        "timestamp": [
            2557.0,
            2557.2
        ],
        "text": " В построчном режиме."
    },
    {
        "timestamp": [
            2560.12,
            2560.62
        ],
        "text": " Представляю, что у нас какой-то суперогромный набор данных."
    },
    {
        "timestamp": [
            2562.98,
            2563.24
        ],
        "text": " Кстати, интересно, сколько эта штука весит,"
    },
    {
        "timestamp": [
            2566.48,
            2578.0
        ],
        "text": " а то я, может быть, слишком разогнался с гигабайтами а так она весит всего 9 гигабайт мы можем целом то еще три нуля накинуть легко еще три нуля попробую"
    },
    {
        "timestamp": [
            2578.0,
            2585.44
        ],
        "text": " еще раз это сделать здесь он уже подумает на прям"
    },
    {
        "timestamp": [
            2585.44,
            2609.76
        ],
        "text": " по 0 по одному нулю вероятно стоило накидывать но окей ладно но по крайней мере он работает да он он не споткнулся интересно станет сколько файл будет вести с 500 записями он весил"
    },
    {
        "timestamp": [
            2609.76,
            2619.74
        ],
        "text": " 9 мегабайт наверное не стоило 3 0 добавлять я думаю что будет работать долго и вероятно он раздуется"
    },
    {
        "timestamp": [
            2621.88,
            2623.44
        ],
        "text": " до 500 мегабайт наверно"
    },
    {
        "timestamp": [
            2635.06,
            2649.96
        ],
        "text": " до 500 мегабайт наверно так давайте это остановлю удалю 30 и добавлю 1 Илья, откуда сообщение?"
    },
    {
        "timestamp": [
            2649.96,
            2655.84
        ],
        "text": " Это непосредственно VS Code мне сказал."
    },
    {
        "timestamp": [
            2658.24,
            2658.96
        ],
        "text": " Интересно."
    },
    {
        "timestamp": [
            2661.78,
            2666.54
        ],
        "text": " Самое идиотское, что я начал... Я не стал писать 100 миллионов,"
    },
    {
        "timestamp": [
            2666.64,
            2668.4
        ],
        "text": " я сказал, становится на сотни."
    },
    {
        "timestamp": [
            2673.08,
            2675.22
        ],
        "text": " Так, а потом ты руками остановил это?"
    },
    {
        "timestamp": [
            2675.32,
            2677.32
        ],
        "text": " Или он обработал это все до конца?"
    },
    {
        "timestamp": [
            2679.98,
            2681.18
        ],
        "text": " Окно не отвечает."
    },
    {
        "timestamp": [
            2681.32,
            2685.02
        ],
        "text": " Короче, он подумал секунды 30 и завис, короче."
    },
    {
        "timestamp": [
            2686.5,
            2692.14
        ],
        "text": " Мне кажется, что, возможно, там ошибка закралась, где-то вот чуть-чуть, короче, стопитом не отработал."
    },
    {
        "timestamp": [
            2695.68,
            2705.0
        ],
        "text": " Если бы стопитом отработал, у тебя бы там всего 50 строк было, потому что мы же записываем только четные числа."
    },
    {
        "timestamp": [
            2711.88,
            2712.16
        ],
        "text": " Я понимаю, но я смотрю на код, и там все."
    },
    {
        "timestamp": [
            2714.22,
            2715.14
        ],
        "text": " У меня кодировка только не записана."
    },
    {
        "timestamp": [
            2716.2,
            2716.78
        ],
        "text": " А вот здесь пробел еще."
    },
    {
        "timestamp": [
            2718.24,
            2718.34
        ],
        "text": " Тут пробел еще."
    },
    {
        "timestamp": [
            2719.56,
            2719.9
        ],
        "text": " Может быть, он не был добавлен."
    },
    {
        "timestamp": [
            2721.56,
            2722.18
        ],
        "text": " Вот здесь вот на 34-й строке."
    },
    {
        "timestamp": [
            2756.14,
            2825.24
        ],
        "text": " Потому что здесь я использую формат число, пробел, написано число. И этот пробел я немножко позже добавлял. А у меня с top Python просто число. И он его не понял. Все? Да. Так. В общем, какое тут числительное? Давайте смотреть. Это 7 нулей. 10 миллионов я записал 7 0 10 миллионов так как мы пишем только четные числа так как мы пишем только четные числа у нас пайл запишется половина. То есть это будет 5 миллионов строк. У меня файл весит 97 мегабайт, если не ошибаюсь. Пишем. пишем Вот такой тлок, допустим. И у нас оперативки на нашем компьютере, на сервере маленьком скромником, допустим, нет столько оперативки, чтобы это открыть, взять список и вычитать. Мы должны построчно это обработать. Без проблем мы сможем это сделать сейчас. Так."
    },
    {
        "timestamp": [
            2826.08,
            2831.24
        ],
        "text": " Почему он одно число забыл, говорит Руслан?"
    },
    {
        "timestamp": [
            2832.36,
            2833.84
        ],
        "text": " А потому что..."
    },
    {
        "timestamp": [
            2833.84,
            2834.96
        ],
        "text": " Потому что..."
    },
    {
        "timestamp": [
            2834.96,
            2839.22
        ],
        "text": " Так, потому что..."
    },
    {
        "timestamp": [
            2839.22,
            2841.0
        ],
        "text": " Потому что файл break находится после..."
    },
    {
        "timestamp": [
            2842.06,
            2843.92
        ],
        "text": " Break находится раньше, чем запись."
    },
    {
        "timestamp": [
            2844.32,
            2848.24
        ],
        "text": " Поэтому как только равно происходит break если"
    },
    {
        "timestamp": [
            2848.24,
            2877.74
        ],
        "text": " поместить 99 забыл а не настолько четная да я уже понял а 10000 так мы это записали и мы можем это же считать логику записи"
    },
    {
        "timestamp": [
            2877.74,
            2889.54
        ],
        "text": " я буду комментировать чтобы не перезаписывать этот файл еще раз и допустим моя задача в этом логе интересно как через windows он откроется не"
    },
    {
        "timestamp": [
            2889.54,
            2897.5
        ],
        "text": " кроется ну 100 мегабайт уже тяжело ему до представьте если лог 500 мегабайт какой-нибудь"
    },
    {
        "timestamp": [
            2897.5,
            2912.3
        ],
        "text": " реально там же достаточно длинные лог строки могут быть блокнот с дюжон 70 миллионов символов окей"
    },
    {
        "timestamp": [
            2919.3,
            2927.28
        ],
        "text": " интересно ради прикола просто гляну сколько сколько блокнот сейчас в оперативке занимает место."
    },
    {
        "timestamp": [
            2928.54,
            2929.84
        ],
        "text": " 500 мегабайт."
    },
    {
        "timestamp": [
            2930.32,
            2931.04
        ],
        "text": " Окей."
    },
    {
        "timestamp": [
            2931.32,
            2932.52
        ],
        "text": " Ладно."
    },
    {
        "timestamp": [
            2934.54,
            2937.48
        ],
        "text": " Ну, то есть как бы файл сотню весит, да, но программа, которая обслуживает его, вероятно,"
    },
    {
        "timestamp": [
            2937.6,
            2941.54
        ],
        "text": " какие-то еще дополнительные вещи обрабатывает, и поэтому..."
    },
    {
        "timestamp": [
            2942.32,
            2950.56
        ],
        "text": " Windows вообще славится оптимизаци своей расходов ресурсов поэтому блокнот открывшись"
    },
    {
        "timestamp": [
            2950.56,
            2959.8
        ],
        "text": " файл 100 мегабайт весит в оперативке 500 мегабайт ну вот у меня все 10 миллионов здесь есть и остановка"
    },
    {
        "timestamp": [
            2959.8,
            2972.22
        ],
        "text": " последнее число также не 10 миллионов потому что файл right после брейка ладно я закрою буду мучить систему эти"
    },
    {
        "timestamp": [
            2972.22,
            2985.62
        ],
        "text": " запись закомментирована и мы можем это построчно считать допустим мы ищем какую-то конкретную запись."
    },
    {
        "timestamp": [
            2988.0,
            2988.54
        ],
        "text": " Или просто выведем в терминал. Не знаю."
    },
    {
        "timestamp": [
            2992.58,
            2995.58
        ],
        "text": " Окей, давайте я сделаю строку, которую ищем."
    },
    {
        "timestamp": [
            2999.3,
            3065.46
        ],
        "text": " Тут может быть регулярка, но я,устим сделаю так 9 миллионов 900 тысяч 982 чётное должно-то быть. Я буду искать строки по штучному. Стриповать ее надо ли? Стрип должен отрезать пер получать строки по штучным."
    },
    {
        "timestamp": [
            3067.28,
            3070.0
        ],
        "text": " Стриповать ее надо ли? Ну, стрип должен отрезать перенос строки."
    },
    {
        "timestamp": [
            3070.52,
            3072.78
        ],
        "text": " Ну, окей. Ладно. Отстрипуем ее."
    },
    {
        "timestamp": [
            3077.64,
            3080.5
        ],
        "text": " И мы получили эту строчку."
    },
    {
        "timestamp": [
            3082.16,
            3086.02
        ],
        "text": " 9 900 982 число."
    },
    {
        "timestamp": [
            3088.12,
            3091.6
        ],
        "text": " Оно как бы немножко дольше будет работать, капелюшечку совсем."
    },
    {
        "timestamp": [
            3091.6,
            3099.24
        ],
        "text": " Но если в оперативке мало, оно вообще будет работать, а то просто не будет."
    },
    {
        "timestamp": [
            3099.9,
            3102.1
        ],
        "text": " В этом вся фишка."
    },
    {
        "timestamp": [
            3103.44,
            3150.14
        ],
        "text": " Причем работы оно будет занимать супермалом оперативке еще. Так, Илья прислал размер 4,6 гигабайта. Но вот это, наверное, уже будет тяжеловато компьютеру. Тяжеловато. Так, Артем прислал скейншот, тоже смотрим. 1 2 3 так сколько у тебя нулей 1 2 3 4 1 0 и 1000"
    },
    {
        "timestamp": [
            3152.06,
            3170.24
        ],
        "text": " смотри такая же проблема как у руслана по моему по моему руслан до у нас 12 строка число с большой буквы во-первых во вторых без пробела а стоп и там у тебя с пробелом и с"
    },
    {
        "timestamp": [
            3170.24,
            3178.34
        ],
        "text": " маленькой буквы то есть тебе в 12 строку надо записать число с маленькой буквы и перед ч добавить"
    },
    {
        "timestamp": [
            3178.34,
            3205.34
        ],
        "text": " символ пробела как у меня это записано поэтому он у тебя не может остановиться и просто пишет это до бесконечности. Вероятно, тебе придется стереть этот файл, который получился, и весит супермного, и попробовать это запустить еще раз. А вы можете попробовать это набрать. Сделаем чекпоинт также."
    },
    {
        "timestamp": [
            3205.68,
            3207.92
        ],
        "text": " Отметьтесь, задайте вопросы."
    },
    {
        "timestamp": [
            3217.58,
            3227.04
        ],
        "text": " Получается, что у нас c свшк вернет генератор и текст-шка вернет генератор."
    },
    {
        "timestamp": [
            3227.62,
            3231.3
        ],
        "text": " JSON в связи со своей спецификой генератор не вернет."
    },
    {
        "timestamp": [
            3232.82,
            3237.36
        ],
        "text": " Но мы можем использовать и ноль формат JSON, если он все-таки вам нужен."
    },
    {
        "timestamp": [
            3238.2,
            3243.38
        ],
        "text": " Есть альтернативные версии формата, называется JSON-L."
    },
    {
        "timestamp": [
            3243.78,
            3248.92
        ],
        "text": " Это просто большое количество объектов JSON, записанное в файл с новой строки."
    },
    {
        "timestamp": [
            3248.92,
            3259.7
        ],
        "text": " И таким образом вы можете их по ним оперироваться, вероятно, также получать генератор и получать поштучно эти объекты."
    },
    {
        "timestamp": [
            3261.72,
            3264.6
        ],
        "text": " Оно используется для API."
    },
    {
        "timestamp": [
            3264.6,
            3265.68
        ],
        "text": " Оно используется для API."
    },
    {
        "timestamp": [
            3275.28,
            3282.88
        ],
        "text": " Допустим, в OpenAI API есть опция получить обработку со скидкой 50%, но ответ ты получишь не сразу, а в течение суток. То есть ты можешь закинуть, ну не знаю, есть очередь задач из 500 запросов."
    },
    {
        "timestamp": [
            3282.88,
            3283.38
        ],
        "text": " Есть очередь задач из 500 запросов."
    },
    {
        "timestamp": [
            3296.62,
            3297.34
        ],
        "text": " Ты формируешь JSON-L, отправляешь туда, и в течение суток, до суток, они жуют это жуют и отдают такой же JSON-L с 500 ответами обратно."
    },
    {
        "timestamp": [
            3299.54,
            3301.32
        ],
        "text": " И скидка 50% за это."
    },
    {
        "timestamp": [
            3347.44,
            3347.96
        ],
        "text": " Когда у них сервера имеют наименьшую загрузку, они просто нагружают это вот этими задачами из очередей. И в итоге все в профите. вообще это один из таких популярных кейсов использования генераторов. У вас реально может быть большой лог, на самом деле."
    },
    {
        "timestamp": [
            3350.68,
            3351.6
        ],
        "text": " Сервер там работал, куча записей сделал."
    },
    {
        "timestamp": [
            3352.64,
            3353.02
        ],
        "text": " Он весит много."
    },
    {
        "timestamp": [
            3355.12,
            3355.96
        ],
        "text": " Выкачивать его лень."
    },
    {
        "timestamp": [
            3361.8,
            3362.36
        ],
        "text": " Текстовый документ себе качать на компьютер размером 2, 3, 4, 5 гигов."
    },
    {
        "timestamp": [
            3363.54,
            3364.14
        ],
        "text": " Чтобы в нем что-то поискать."
    },
    {
        "timestamp": [
            3368.56,
            3369.86
        ],
        "text": " При этом сервер, допустим, имеет оперативную память, ну, там 2 гигабайта, да."
    },
    {
        "timestamp": [
            3372.98,
            3374.08
        ],
        "text": " И то это, ну, сервера подороже уже немножечко."
    },
    {
        "timestamp": [
            3374.92,
            3375.32
        ],
        "text": " Ну, или даже 4."
    },
    {
        "timestamp": [
            3376.96,
            3378.64
        ],
        "text": " Ну, то есть он в любом случае не поместится."
    },
    {
        "timestamp": [
            3380.18,
            3381.12
        ],
        "text": " И вот такую штуку пишите."
    },
    {
        "timestamp": [
            3389.96,
            3396.8
        ],
        "text": " SearchString, вероятно, это шаблон регулярного выражения может быть может быть действительно вывод такой по такому алгоритму ищите и все записи аккумулируете в переменную подходящие и у"
    },
    {
        "timestamp": [
            3396.8,
            3405.18
        ],
        "text": " вас из 10 миллионов записей какая-нибудь списочек накопится из 50 записей."
    },
    {
        "timestamp": [
            3408.46,
            3412.66
        ],
        "text": " Ну, допустим, вы искали какой-то вызов какой-то функции или какие-нибудь эксепшены редкие, которые очень редко случаются."
    },
    {
        "timestamp": [
            3413.58,
            3417.58
        ],
        "text": " Ну, то есть какие-то такие узкие специфические вещи"
    },
    {
        "timestamp": [
            3417.58,
            3419.86
        ],
        "text": " вам нужно было найти и собрать по ним данные."
    },
    {
        "timestamp": [
            3421.08,
            3454.86
        ],
        "text": " И, собственно, один из популярных кейсов. Ну, и на СебСах это не редкий гость, но, наверное, и не частый. Все-таки вопросы периодически читаю, всякие подборки вопросов для СБСов. Могут вполне себе спросить. А следующим этапом это будет описать свое, написать свой генератор, ну и класс итератор."
    },
    {
        "timestamp": [
            3455.66,
            3460.78
        ],
        "text": " Суть одна, вы просто описываете, что будет отдаваться на каждом цикле форм."
    },
    {
        "timestamp": [
            3461.32,
            3467.84
        ],
        "text": " По сути, форм запускает вот этот пинок, пинок ежа, чтобы тот начал лететь."
    },
    {
        "timestamp": [
            3468.62,
            3474.08
        ],
        "text": " Говорит, дай мне следующее значение. Потом помещает его в переменную."
    },
    {
        "timestamp": [
            3474.08,
            3479.84
        ],
        "text": " Мы с этой переменной как-то работаем. Логика итерации цикла заканчивается,"
    },
    {
        "timestamp": [
            3479.94,
            3483.4
        ],
        "text": " и наступает новая итерация, цикл for опять говорит, дай мне следующее."
    },
    {
        "timestamp": [
            3484.14,
            3510.86
        ],
        "text": " И описывая генераторные функции и итераторы, мы просто описываем ту логику, которая будет работать, когда у нас будет просить следующее. То есть в данном случае цикл for – это как тот, кому мы что-то должны, и он нас требует, дай мне дальше, дай мне дальше. А генераторные выражения – это как те должники, которые отдают."
    },
    {
        "timestamp": [
            3511.4,
            3513.88
        ],
        "text": " И мы можем настраивать, как они будут отдавать."
    },
    {
        "timestamp": [
            3517.66,
            3528.94
        ],
        "text": " Списки отдают, элементы списка, строки отдают символы а мы может быть хотим отдавать какой-то подготовленную структуру данных"
    },
    {
        "timestamp": [
            3528.94,
            3541.84
        ],
        "text": " клюбур причем мы можем делать допустим такими способами запросы то есть у нас есть погодная"
    },
    {
        "timestamp": [
            3541.84,
            3548.16
        ],
        "text": " пир есть список городов нам нужно получить погоду по каждому, допустим, из 20 городов."
    },
    {
        "timestamp": [
            3548.6,
            3556.02
        ],
        "text": " И при этом либо мы должны будем сделать 20 запросов и дождаться все 20 ответов,"
    },
    {
        "timestamp": [
            3556.02,
            3561.24
        ],
        "text": " тогда получим данные, или мы можем по мере необходимости выводить это."
    },
    {
        "timestamp": [
            3561.22,
            3567.38
        ],
        "text": " выводить это."
    },
    {
        "timestamp": [
            3569.6,
            3570.64
        ],
        "text": " Ну, я думаю, что сейчас потихонечку что-нибудь будем писать."
    },
    {
        "timestamp": [
            3571.02,
            3573.46
        ],
        "text": " Может быть, еще несколько человек у нас отметится"
    },
    {
        "timestamp": [
            3573.46,
            3578.24
        ],
        "text": " и напишем первые генераторные функции."
    },
    {
        "timestamp": [
            3578.76,
            3580.32
        ],
        "text": " Функции будут точно такие же,"
    },
    {
        "timestamp": [
            3580.88,
            3584.98
        ],
        "text": " но вместо return у них будет оператор другой."
    },
    {
        "timestamp": [
            3591.22,
            3597.58
        ],
        "text": " Называется он yield. но вместо return у них будет оператор другой называется он елт что-то типа всегда забываю синонимы периода еще раз посмотрим каждый рассмотрим"
    },
    {
        "timestamp": [
            3649.94,
            3658.36
        ],
        "text": " Я закину скрин, если кто-то еще донабирает это в чат, чтобы у вас была возможность донабирать, тоже отметиться. Я пока схожу за переводом, наверное. илт дал такой не знаю правильно ли я произношу правильно уступать давать поддаваться дать поддаться принести урожай урожайность продуктивность доход выход но не знаю что подойдет больше наверное дать наверное дать"
    },
    {
        "timestamp": [
            3670.02,
            3687.86
        ],
        "text": " дать отдать вот что такое то есть ритер на это возврат всего функция просто утонат работала все поддала синоним урожай да у меня такие аналогии породил допустим нас сбор урожая происходит на поле где-нибудь. И return, когда функция работает,"
    },
    {
        "timestamp": [
            3688.76,
            3691.34
        ],
        "text": " мы должны собрать все от начала до конца,"
    },
    {
        "timestamp": [
            3691.56,
            3694.1
        ],
        "text": " выполнить все работы и отдать результат."
    },
    {
        "timestamp": [
            3694.32,
            3698.02
        ],
        "text": " Весь этот уже урожай отдать заказчику."
    },
    {
        "timestamp": [
            3698.6,
            3702.24
        ],
        "text": " А yield, он будет более хитро работать."
    },
    {
        "timestamp": [
            3702.24,
            3875.84
        ],
        "text": " Он будет, допустим, в этом режиме будем отдавать каждый день что-то по чуть-чуть вот в этом разница давайте я сделаю комит а вот 감사합니다. you you you здесь я наверное дам type hint каноничный так from typing, import, генератор. И здесь обозначу, что функция возвращает генератор. Давайте, знаете, еще как сделаем? Сделаем здесь старт и стоп."
    },
    {
        "timestamp": [
            3877.02,
            3877.48
        ],
        "text": " Вот так."
    },
    {
        "timestamp": [
            3881.32,
            3906.96
        ],
        "text": " И здесь делаем от 0 до 2. До двух. И вот при вызове этого мы получим с вами exception. Специальный служебный exception. Здесь получим 0. Здесь получим 1. А здесь получим kish в виде stop iteration exception."
    },
    {
        "timestamp": [
            3909.96,
            3913.24
        ],
        "text": " И вот здесь можно будет перестановиться и поговорить."
    },
    {
        "timestamp": [
            3920.72,
            3923.88
        ],
        "text": " Вы спросите, а зачем это все?"
    },
    {
        "timestamp": [
            3924.88,
            3927.36
        ],
        "text": " Range и так является генератором."
    },
    {
        "timestamp": [
            3928.78,
            3932.42
        ],
        "text": " А я скажу, что мы все эти финтифлюшки,"
    },
    {
        "timestamp": [
            3932.46,
            3935.36
        ],
        "text": " мы можем поместить в один генератор,"
    },
    {
        "timestamp": [
            3936.5,
            3939.36
        ],
        "text": " допустим, фильтрацию, map,"
    },
    {
        "timestamp": [
            3939.72,
            3941.7
        ],
        "text": " все, что мы делали выше в виде скрипта,"
    },
    {
        "timestamp": [
            3941.7,
            3947.2
        ],
        "text": " мы можем поместить это в одну логику генератора назвать это как-то"
    },
    {
        "timestamp": [
            3947.2,
            3959.26
        ],
        "text": " ну типа мой генератор строчных значений четных чисел 10 слов он будет отдавать уже то что мы"
    },
    {
        "timestamp": [
            3959.26,
            3965.14
        ],
        "text": " делали виде скрипта допустим да это будут четные числа,"
    },
    {
        "timestamp": [
            3965.24,
            3967.76
        ],
        "text": " оформленные в строковое значение с какими-то переписками."
    },
    {
        "timestamp": [
            3970.32,
            3975.04
        ],
        "text": " И получается, что вот этот yield – это как раз-таки отдать."
    },
    {
        "timestamp": [
            3976.5,
            3979.76
        ],
        "text": " И обратите внимание, что он находится на отступе."
    },
    {
        "timestamp": [
            3979.76,
            3980.58
        ],
        "text": " Обратите внимание."
    },
    {
        "timestamp": [
            3980.72,
            3983.6
        ],
        "text": " Если бы мы делали return, как бы мы сделали?"
    },
    {
        "timestamp": [
            3983.72,
            3987.12
        ],
        "text": " Мы бы сделали здесь какой-то накопитель сверху, типа result."
    },
    {
        "timestamp": [
            3987.8,
            3990.38
        ],
        "text": " Сделали бы for i range, что-то там."
    },
    {
        "timestamp": [
            3991.88,
            3993.82
        ],
        "text": " i append result."
    },
    {
        "timestamp": [
            3994.2,
            3995.78
        ],
        "text": " И вот этот result накопили бы."
    },
    {
        "timestamp": [
            3996.8,
            3999.38
        ],
        "text": " Цикл отработал бы от начала до конца."
    },
    {
        "timestamp": [
            3999.38,
            4049.58
        ],
        "text": " И мы бы return подписали бы вот здесь, прямо под for, с одним отступом. То есть return бы отработал после последней итерации цикла. А вот yield он работает прямо в цикле. Получается, я что-то сгенерил и сразу отдал. Как пример с урожаем. Покосный день закончился, все, что накосили, отвезли по местному назначению сразу же. Не копим это где-то в одном месте. Чет на фрилансов сегодня другую соточку рублей закинул. Не жду месяца, не накапливаю результат, отдаю сразу же. И Yield позволяет обращаться сюда много раз."
    },
    {
        "timestamp": [
            4050.54,
            4051.02
        ],
        "text": " Много раз."
    },
    {
        "timestamp": [
            4053.26,
            4059.6
        ],
        "text": " Получается, что мы эту функцию запускаем, myGenerator."
    },
    {
        "timestamp": [
            4060.24,
            4063.18
        ],
        "text": " Она у нас требует два параметра, start и stop."
    },
    {
        "timestamp": [
            4064.28,
            4067.1
        ],
        "text": " Собственно, они как раз идут во встроенный ренч здесь."
    },
    {
        "timestamp": [
            4068.74,
            4074.64
        ],
        "text": " И таким образом я создаю, называю генератор."
    },
    {
        "timestamp": [
            4074.64,
            4080.4
        ],
        "text": " И в переменную ген у меня ложится не список чисел,"
    },
    {
        "timestamp": [
            4080.48,
            4081.96
        ],
        "text": " как это могло бы быть раньше у нас,"
    },
    {
        "timestamp": [
            4082.28,
            4084.82
        ],
        "text": " а ложится как раз-таки генератор object."
    },
    {
        "timestamp": [
            4085.8,
            4088.6
        ],
        "text": " Генератор object, возвращающий числа."
    },
    {
        "timestamp": [
            4089.1,
            4091.24
        ],
        "text": " Я это здесь конкретно проаннотировал,"
    },
    {
        "timestamp": [
            4091.44,
            4094.54
        ],
        "text": " что эта штука отдает генератор чисел."
    },
    {
        "timestamp": [
            4097.54,
            4100.02
        ],
        "text": " VSCode проаннотировал это немножко иначе."
    },
    {
        "timestamp": [
            4100.02,
            4103.58
        ],
        "text": " То есть здесь генератор чисел, none, none."
    },
    {
        "timestamp": [
            4103.94,
            4106.48
        ],
        "text": " Сейчас мы сходим пообщаемся на эту тему,"
    },
    {
        "timestamp": [
            4106.58,
            4111.02
        ],
        "text": " почему полная аннотация идет с тремя позициями аж."
    },
    {
        "timestamp": [
            4111.76,
            4113.94
        ],
        "text": " Но нам технически хватит одной."
    },
    {
        "timestamp": [
            4114.1,
            4114.66
        ],
        "text": " Замечательно."
    },
    {
        "timestamp": [
            4115.36,
            4118.5
        ],
        "text": " Ну, то есть этим функционалом мы не будем пользоваться,"
    },
    {
        "timestamp": [
            4118.5,
            4121.38
        ],
        "text": " поэтому нам здесь хватит одной позиции."
    },
    {
        "timestamp": [
            4122.92,
            4124.22
        ],
        "text": " Не хватило."
    },
    {
        "timestamp": [
            4125.54,
            4126.48
        ],
        "text": " А что, ругается?"
    },
    {
        "timestamp": [
            4126.92,
            4127.6
        ],
        "text": " Ругается."
    },
    {
        "timestamp": [
            4128.52,
            4130.1
        ],
        "text": " А патчар ругается или VS Code?"
    },
    {
        "timestamp": [
            4131.58,
            4132.62
        ],
        "text": " Type error."
    },
    {
        "timestamp": [
            4132.78,
            4134.92
        ],
        "text": " Two few arguments for typing generator."
    },
    {
        "timestamp": [
            4135.74,
            4137.86
        ],
        "text": " Actual one expected three."
    },
    {
        "timestamp": [
            4139.12,
            4140.3
        ],
        "text": " Слушайте, давайте я запущу,"
    },
    {
        "timestamp": [
            4140.3,
            4141.88
        ],
        "text": " а то, может быть, у меня тоже ругается."
    },
    {
        "timestamp": [
            4142.32,
            4142.8
        ],
        "text": " Подождите."
    },
    {
        "timestamp": [
            4144.94,
            4149.18
        ],
        "text": " Да нет, не ругается да нет не ругается можно тогда вот так проаннотировать"
    },
    {
        "timestamp": [
            4149.18,
            4158.6
        ],
        "text": " полная версия вот она генератор первое число 1 и потом нам на можно попробовать так а может быть"
    },
    {
        "timestamp": [
            4158.6,
            4166.08
        ],
        "text": " не импортирован генератор и уж надо из тайпинга импортировать еще. Импортирован, конечно."
    },
    {
        "timestamp": [
            4168.3,
            4168.98
        ],
        "text": " Попробовать пронотировать в полной версии."
    },
    {
        "timestamp": [
            4171.78,
            4173.78
        ],
        "text": " У меня он что-то как-то тоже вроде ругался, потом... Нет, не хочет."
    },
    {
        "timestamp": [
            4175.38,
            4178.76
        ],
        "text": " Сейчас я строчку посмотрю, какую он ругается-то."
    },
    {
        "timestamp": [
            4180.84,
            4209.36
        ],
        "text": " Собственно, у вас 60-ая эта строка. 60-ая. Ну, это, да, это аннотация типов, наверное. Ну, там у меня тоже просто генератор int, наверное, все-таки записать. Ну, попробовать можно, да, попробовать сделать так, и если что, сейчас что сейчас посмотрим экран да все сработало"
    },
    {
        "timestamp": [
            4209.36,
            4215.36
        ],
        "text": " просто что стоп итерейшн да все выдает"
    },
    {
        "timestamp": [
            4215.36,
            4229.42
        ],
        "text": " там есть более сложная логика с ними допустим мы на каждой итерации что-то можем еще модифицировать"
    },
    {
        "timestamp": [
            4229.42,
            4236.62
        ],
        "text": " в самом генераторе это во-первых а во-вторых во-вторых не помню сейчас посмотрим посмотрим поэтому он"
    },
    {
        "timestamp": [
            4236.62,
            4250.38
        ],
        "text": " три три значения полная нотация типов принимает хотя вот у меня нормально с одной работой так а улли почему-то нет сейчас попробую разобраться"
    },
    {
        "timestamp": [
            4250.38,
            4258.76
        ],
        "text": " генератор специальный тип из модуля typing который используется для аннотации функций генераторов ну"
    },
    {
        "timestamp": [
            4258.76,
            4267.08
        ],
        "text": " собственно что мы сделали генератор int указывает что наш генератор будет возвращать целые числа параметры старта стоп"
    },
    {
        "timestamp": [
            4267.08,
            4274.46
        ],
        "text": " окей ладно с этим понятно что они делают генератор значит как это выглядит елтайп сентайп"
    },
    {
        "timestamp": [
            4274.46,
            4326.58
        ],
        "text": " и таран тайп то есть у нас есть возможность дописать помимо и лт здесь еще return. То есть и yield, и return будет. Два оператора. Это раз. Во-вторых, есть еще опция дописывать, я так понимаю, значение, которое можно в генератор отправлять. Ну, ладно. Я, честно говоря, не хотел туда заглядывать. Давайте примерчик модифицируем. Робота попросим, чтобы он его модифицировал. Что такое stop iteration сначала? Stop iteration – это специальный exception, который обрабатывается под капотом цикла for, чтобы он понимал, что он перебрал от начала до конца итерируемый объект."
    },
    {
        "timestamp": [
            4326.58,
            4333.68
        ],
        "text": " То есть его генерируют все итерируемые объекты, и этот exception, он говорит,"
    },
    {
        "timestamp": [
            4335.28,
            4339.22
        ],
        "text": " цикл for, дружище, дальше ничего нет, остановись."
    },
    {
        "timestamp": [
            4340.18,
            4344.82
        ],
        "text": " И вот, собственно, так цикл for понимает, что он перебрал последовательность от начала до конца."
    },
    {
        "timestamp": [
            4344.82,
            4345.34
        ],
        "text": " И вот, собственно, так CycleFor понимает, что он перебрал последовательность от начала до конца."
    },
    {
        "timestamp": [
            4352.74,
            4352.9
        ],
        "text": " Мы его обычно не видим нигде и никогда, но когда мы вызываем служебную функцию next,"
    },
    {
        "timestamp": [
            4360.62,
            4361.72
        ],
        "text": " которая также под капотом называется в CycleFor, мы получаем значение 0, 1."
    },
    {
        "timestamp": [
            4369.32,
            4369.58
        ],
        "text": " И будем получать так все значения, которые есть в генераторе, пока мы не исчерпаем его."
    },
    {
        "timestamp": [
            4374.44,
            4375.4
        ],
        "text": " Как только значение там не останется, генератор вернет stop iteration."
    },
    {
        "timestamp": [
            4383.76,
            4385.22
        ],
        "text": " То есть функция next падает с stop iteration exception, когда не получает ничего из генератора."
    },
    {
        "timestamp": [
            4388.1,
            4388.78
        ],
        "text": " При этом на итераторах мы будем описывать это."
    },
    {
        "timestamp": [
            4394.42,
            4394.92
        ],
        "text": " То есть есть еще выше, как абстракция, как обычно, это классы итератора."
    },
    {
        "timestamp": [
            4402.1,
            4406.48
        ],
        "text": " То есть у нас есть возможность на OOP описать итерированный объект и его логику. И мы там опишем как раз в каких случаях будет происходить стоп итерейшн"
    },
    {
        "timestamp": [
            4406.48,
            4417.28
        ],
        "text": " exception когда да когда мы будем давать циклу for понять что то что он перебирает наш объект все мы"
    },
    {
        "timestamp": [
            4417.28,
            4428.52
        ],
        "text": " больше ничего дать не можем есть еще одна фишечка интересная. Это то, что вот эту штуку, ее можно перебрать только один раз."
    },
    {
        "timestamp": [
            4429.58,
            4433.92
        ],
        "text": " И это как будто бы для меня логичная история, но не уверен, что для вас тоже."
    },
    {
        "timestamp": [
            4433.92,
            4435.2
        ],
        "text": " Давайте смотреть почему."
    },
    {
        "timestamp": [
            4436.06,
            4442.2
        ],
        "text": " Мы создали генератор, то есть мы создали ссылку на результат работы этой функции."
    },
    {
        "timestamp": [
            4443.52,
            4445.0
        ],
        "text": " И это будет объект генератора."
    },
    {
        "timestamp": [
            4446.12,
            4448.74
        ],
        "text": " Потом мы говорим, дай нам данные."
    },
    {
        "timestamp": [
            4451.18,
            4453.16
        ],
        "text": " Одна итерация цикла отрабатывает,"
    },
    {
        "timestamp": [
            4453.72,
            4455.08
        ],
        "text": " и он дает нам нолик."
    },
    {
        "timestamp": [
            4456.6,
            4458.04
        ],
        "text": " То есть фарш назад не провернешь."
    },
    {
        "timestamp": [
            4458.38,
            4460.78
        ],
        "text": " Нолик был уже отдан, нолика в генераторе нет."
    },
    {
        "timestamp": [
            4461.6,
            4463.58
        ],
        "text": " Он как бы здесь встает на паузу,"
    },
    {
        "timestamp": [
            4463.58,
            4465.22
        ],
        "text": " и мы говорим, отдай нам еще."
    },
    {
        "timestamp": [
            4466.04,
            4467.36
        ],
        "text": " И он дает нам единичку."
    },
    {
        "timestamp": [
            4468.62,
            4470.1
        ],
        "text": " И опять встает на паузу."
    },
    {
        "timestamp": [
            4470.74,
            4472.08
        ],
        "text": " Нолик мы уже не получим."
    },
    {
        "timestamp": [
            4472.98,
            4474.16
        ],
        "text": " То есть мы можем, допустим,"
    },
    {
        "timestamp": [
            4475.64,
            4476.64
        ],
        "text": " нолик забрать next,"
    },
    {
        "timestamp": [
            4476.64,
            4479.28
        ],
        "text": " а потом поместить в цикл его."
    },
    {
        "timestamp": [
            4480.5,
            4482.44
        ],
        "text": " Но ноль мы в цикле уже не увидим."
    },
    {
        "timestamp": [
            4483.04,
            4486.36
        ],
        "text": " Потому что он как бы встает здесь на паузу до востребования."
    },
    {
        "timestamp": [
            4486.36,
            4492.36
        ],
        "text": " Как следующее востребование происходит, он делает вычисление и дает следующее значение."
    },
    {
        "timestamp": [
            4492.82,
            4495.02
        ],
        "text": " И так до тех пор, пока не отдаст все."
    },
    {
        "timestamp": [
            4495.6,
            4496.96
        ],
        "text": " От начала до конца."
    },
    {
        "timestamp": [
            4499.82,
            4626.3
        ],
        "text": " Так, вижу, Артем прислал stop iteration исключение. Так и должно быть, да. Именно так и должно быть. На третьем принте stop iteration. Все хорошо. давайте сделаем здесь отметку думаю что же многие набрали просто бахните плюсами пойдем дальше к Критерну XnType, наверное, попробуем. Ни разу не пользовался. Генераторами редко, а вот этими подвидами, дополнительными опциями, так скажем, не писал. Вообще штука прикольная. Я планирую парочку программ модифицировать таким способом. Ага, да. Да, Артем, так и должно быть. Это ожидаемое поведением. Так, посмотрим, что он нам написал. Расширенный генератор. StartInt, StopInt, StepInt и генератор и union и стр"
    },
    {
        "timestamp": [
            4682.94,
            4696.66
        ],
        "text": " анальных все я понял почему ее на так мне это не нравится я хочу иметь все три позиции и елты и сент и ритер return это это еще рассмотрим значит адвен с генератора старInt. Возвращает генератор Int str float. Current Start, текущая позиция, while Current меньше Stop."
    },
    {
        "timestamp": [
            4709.0,
            4709.64
        ],
        "text": " Сенд, Command, Yield, Current, и в Command, Double, производится умножение числа, иначе сложение."
    },
    {
        "timestamp": [
            4710.96,
            4712.42
        ],
        "text": " Возвращается float."
    },
    {
        "timestamp": [
            4712.92,
            4714.02
        ],
        "text": " Прикольно."
    },
    {
        "timestamp": [
            4717.02,
            4717.12
        ],
        "text": " Я предлагаю сейчас сходить на перерыв."
    },
    {
        "timestamp": [
            4722.74,
            4732.9
        ],
        "text": " У нас время подошло, и после перерыва мы как раз вот этот генератор напишем и разберем. Так пока что отдохнем я сделаю комит того что написано и можно будет идти"
    },
    {
        "timestamp": [
            5705.08,
            5705.52
        ],
        "text": " Все, идем на перерыв. you you you you you you you you you you you you you you you you you you you you you you you you you you you you you you you you you you you you you you you you you you итак пожалуйста отметьте, что вы здесь, и давайте продолжим. Отлично. Так, остальные. 9 человек из 15. Окей, у нас половина есть. Остальные, пожалуйста, тоже возвращайтесь. Коммит я сделал. И, в принципе, принципе можем расширить генератор и посмотреть вот тот type hint который полной версии он как раз описывает не только что генератор возвращает."
    },
    {
        "timestamp": [
            5707.58,
            5708.7
        ],
        "text": " Наш генератор, допустим, возвращает числа."
    },
    {
        "timestamp": [
            5712.66,
            5714.78
        ],
        "text": " А полная версия TypeHint описывает еще и дополнительные параметры."
    },
    {
        "timestamp": [
            5717.0,
            5719.68
        ],
        "text": " У нас есть, во-первых..."
    },
    {
        "timestamp": [
            5719.96,
            5721.8
        ],
        "text": " Так."
    },
    {
        "timestamp": [
            5724.6,
            5730.32
        ],
        "text": " У нас здесь none и none. Д на двух параметров нет и вот здесь я могу описать собственно что это"
    },
    {
        "timestamp": [
            5730.32,
            5758.38
        ],
        "text": " такое полная версия таким так у меня версии и ялтайп центр и перьерн тайп то есть елтайп это то что будет отдано на каждом запросе на каждом"
    },
    {
        "timestamp": [
            5758.38,
            5770.98
        ],
        "text": " запросе наш отдает интегра цент тайт он не принимает то есть это дополнительный параметр который можно задавать"
    },
    {
        "timestamp": [
            5770.98,
            5779.98
        ],
        "text": " процессе работы сентайп он не принимает поэтому ничего или терна у него нет поэтому тоже ничего"
    },
    {
        "timestamp": [
            5779.98,
            5785.82
        ],
        "text": " поэтому полная версия type hint здесь выглядела бы вот так."
    },
    {
        "timestamp": [
            5790.22,
            5790.68
        ],
        "text": " Причем я так понимаю, что у большей части группы нормально отработала с Into,"
    },
    {
        "timestamp": [
            5794.9,
            5796.1
        ],
        "text": " у Eli потребовала полную версию аннотации."
    },
    {
        "timestamp": [
            5800.16,
            5804.38
        ],
        "text": " Я не совсем понимаю, в каком случае он будет требовать полную версию. У меня в большинстве случаев тоже всегда работает так."
    },
    {
        "timestamp": [
            6085.56,
            6086.46
        ],
        "text": " Может быть для цикла то есть может быть для цикла он потребует полную версию не уверен но у нас есть опция написать расширенный вариант давайте его потихонечку буду набирать и комментировать you you you you you you да карантанда объявить начали здесь you Thank you. you Итак, описанный у нас есть генератор с полной аннотацией типов."
    },
    {
        "timestamp": [
            6091.44,
            6092.36
        ],
        "text": " Первая аннотация – это yield, то, что возвращается при каждом вызове."
    },
    {
        "timestamp": [
            6096.0,
            6099.52
        ],
        "text": " При каждом вызове у нас происходит…"
    },
    {
        "timestamp": [
            6100.82,
            6100.88
        ],
        "text": " Так, так, так, так."
    },
    {
        "timestamp": [
            6102.16,
            6102.82
        ],
        "text": " У нас здесь есть yield current."
    },
    {
        "timestamp": [
            6128.46,
            6128.56
        ],
        "text": " Current – это у нас int, причем который увеличивается. Дальше. Возможность получить снаружи команду строкой. Это send type. И есть собственно return. То, что возвращается. Так. Рот нам описал здесь, как это будет работать."
    },
    {
        "timestamp": [
            6129.3,
            6135.44
        ],
        "text": " Давайте посмотрим."
    },
    {
        "timestamp": [
            6138.12,
            6138.22
        ],
        "text": " Генератор принимает начальное и конечное значение."
    },
    {
        "timestamp": [
            6141.38,
            6142.2
        ],
        "text": " На каждой итерации можно управлять поведением через команды."
    },
    {
        "timestamp": [
            6148.04,
            6160.4
        ],
        "text": " То есть мы можем менять его поведение double у нас будет умножение сквое возведение в квадрат кьюб возведение в куб при любой другой команде будет просто"
    },
    {
        "timestamp": [
            6160.4,
            6169.24
        ],
        "text": " увеличение на 1 хотя здесь возможно было бы стоило бы описать альтернативную команду,"
    },
    {
        "timestamp": [
            6169.24,
            6174.26
        ],
        "text": " где просто будет сложение, а любая другая команда вызывала бы rise exception,"
    },
    {
        "timestamp": [
            6174.42,
            6176.24
        ],
        "text": " как мне автодополнение кода и предлагало."
    },
    {
        "timestamp": [
            6176.54,
            6177.9
        ],
        "text": " Но, в принципе, так тоже."
    },
    {
        "timestamp": [
            6178.9,
            6179.82
        ],
        "text": " Тут тоже вариант."
    },
    {
        "timestamp": [
            6181.7,
            6190.38
        ],
        "text": " Использовать конструкцию command равно yield current позволяет как получить значение, так и управлять генератором через send."
    },
    {
        "timestamp": [
            6192.54,
            6195.76
        ],
        "text": " Имеет явное возвращаемое значение через return."
    },
    {
        "timestamp": [
            6195.76,
            6206.12
        ],
        "text": " Этот пример у нас получается продвинутого генератора со взаимодействием с пользователем где можно не только получать но и влиять на работу выполнения"
    },
    {
        "timestamp": [
            6206.12,
            6215.36
        ],
        "text": " конструкция команд равно yield current как он пишет мощный механизм двухстороннего обмена данными"
    },
    {
        "timestamp": [
            6215.36,
            6248.88
        ],
        "text": " yield current отдает текущее значение наружу виде инта то есть то что мы здесь аннотировали int. Command равно принимает значение снаружи, которое будет отправлено через метод send. То есть у нас есть специальный метод, который может назначить значение. То есть это позволяет генератору общаться об обе стороны и принимать значение в виде строк, это обозначили и отдавать значение виде целых"
    },
    {
        "timestamp": [
            6248.88,
            6260.1
        ],
        "text": " чисел команд равно yield current и лтк аренда дает current что является inton но то что мы ждем строку"
    },
    {
        "timestamp": [
            6260.1,
            6267.86
        ],
        "text": " мы проаннотировали вот здесь вот 2 аннотации поэтому переменная комната аннотирована строкой потому"
    },
    {
        "timestamp": [
            6267.86,
            6295.78
        ],
        "text": " что вот здесь строка вот такой такая интересная запись значит здесь мы можем сделать вот так создать генератор от 1 до 100 и настраивать его ген send double нас дубль отправляется это"
    },
    {
        "timestamp": [
            6295.78,
            6321.94
        ],
        "text": " значение и мы будем получать умножение на 2 ское и куб можем настроить но Давайте с этим поэкспериментируем. В цикле так же это должно работать. То есть мы можем перенастраивать это в том числе и в цикле. Илья, слушаю."
    },
    {
        "timestamp": [
            6346.24,
            6351.1
        ],
        "text": " Илья, слушаю. Так, я все равно не понял. Почему у нас строка, которая command, равняется числу, которая yield current? Или это просто команда, которая, типа, тормозни, посмотри, что у тебя там в сэнде?"
    },
    {
        "timestamp": [
            6358.12,
            6358.58
        ],
        "text": " Как я это понимаю, это команда, которая ставит генератор на паузу."
    },
    {
        "timestamp": [
            6362.12,
            6367.0
        ],
        "text": " И когда он стоит на паузе, мы можем... То есть это команда, которая отдает данные наружу, когда мы ставим генератор на паузу."
    },
    {
        "timestamp": [
            6367.14,
            6376.02
        ],
        "text": " То есть когда мы попросили следующее значение, получили единичку, и в месте, где yield, эта единичка выходит наружу, и в этом же месте он останавливается на паузу."
    },
    {
        "timestamp": [
            6376.6,
            6380.6
        ],
        "text": " И в этом же месте мы для следующей операции можем внести настройку."
    },
    {
        "timestamp": [
            6381.36,
            6387.38
        ],
        "text": " Поэтому эта запись записывается одной строкой, и получается, что здесь обмен данными происходит в обе стороны."
    },
    {
        "timestamp": [
            6387.86,
            6400.46
        ],
        "text": " То есть генератор в строке 80 может отдать наружу то число, на котором он остановился, и пока он на паузе, он может принять команду настройки."
    },
    {
        "timestamp": [
            6401.46,
            6403.52
        ],
        "text": " То есть это обмен данными в обе стороны."
    },
    {
        "timestamp": [
            6430.98,
            6436.26
        ],
        "text": " То есть это обмен данными в обе стороны. Наружу он отдает int, принимает снаружи внутрь строку. И вот эта аннотация типов об этом и говорит. Первая аннотация это для отдачи данных наружу. Это у нас вот эта часть, вот эта или вот эта. Наружу мы отдаем целочисленное значение пока он стоит на паузе мы можем сказать слушай а давай-ка для следующего значения ты сделаешь нам возведение"
    },
    {
        "timestamp": [
            6436.26,
            6450.14
        ],
        "text": " и мы задаем ему эту настройку виде строки у нас есть специальный инструмент который называется send"
    },
    {
        "timestamp": [
            6450.14,
            6465.78
        ],
        "text": " метод send этот метод он пока стоит генератор на паузе, внутрь туда записывает эту строку."
    },
    {
        "timestamp": [
            6475.24,
            6476.0
        ],
        "text": " И то, что это строка, это вторая аннотация, полная аннотация генератора, говорит об этом, вот эта аннотация типов номер 2."
    },
    {
        "timestamp": [
            6477.58,
            6478.4
        ],
        "text": " Это send type аннотируется."
    },
    {
        "timestamp": [
            6483.16,
            6486.38
        ],
        "text": " Именно только по этой причине редактор проаннотировал command как строку."
    },
    {
        "timestamp": [
            6488.9,
            6489.12
        ],
        "text": " И дальше получается, что мы делаем."
    },
    {
        "timestamp": [
            6491.3,
            6491.7
        ],
        "text": " Мы попросили у него число."
    },
    {
        "timestamp": [
            6493.4,
            6494.08
        ],
        "text": " Он дал нам единичку."
    },
    {
        "timestamp": [
            6497.24,
            6497.74
        ],
        "text": " Мы такие, ну окей, до следующего числа я хочу возвести это в куб."
    },
    {
        "timestamp": [
            6499.62,
            6501.32
        ],
        "text": " Мы делаем send command cube."
    },
    {
        "timestamp": [
            6502.58,
            6502.76
        ],
        "text": " Оно отработало."
    },
    {
        "timestamp": [
            6504.08,
            6504.92
        ],
        "text": " И мы говорим, дай нам дальше."
    },
    {
        "timestamp": [
            6509.24,
            6519.26
        ],
        "text": " Он производит серию вот этих сверок в данном случае команд пришло к юб поэтому он будет карант возводить куб и от и отдаст карант"
    },
    {
        "timestamp": [
            6521.26,
            6573.52
        ],
        "text": " а то есть нас у нас это будет перед перезаписываться вот насчет ретерна давайте сейчас уточним. Я их обычно, если пишу, редко и с елдами. С ретернами, но не знаю, стало ли понятно больше? Как сент работает, я понял сразу. Именно момент с паузой. Какая-то странная взаимообмен. Доксторонний обмен. Да, предвижу тут будут проблемы в коде в дальнейшем. Ну так вроде более-менее. Давайте, значит, ретерна уточним."
    },
    {
        "timestamp": [
            6573.9,
            6575.8
        ],
        "text": " Хорошо, что чуть-чуть понятнее."
    },
    {
        "timestamp": [
            6576.68,
            6577.92
        ],
        "text": " Задавайте вопросы обязательно."
    },
    {
        "timestamp": [
            6578.26,
            6580.62
        ],
        "text": " Будем разбираться, будем мучить Ишку."
    },
    {
        "timestamp": [
            6582.78,
            6584.42
        ],
        "text": " Считал недавно исследование."
    },
    {
        "timestamp": [
            6625.5,
            6625.58
        ],
        "text": " Какие-то ученые проводили какое-то исследование, в общем, что использование ИИ-моделей в работе тупляет сотрудников, кто бы мог подумать. И что если вы это используете очень активно, то старайтесь вникать в причинно-следственные связи. Что это такое, а почему так, а не иначе, а почему эти варианты, а не другие. Какой-то интерактив устраивать, потому что это очень большой соблазн, чтобы робот работал, а ты отдыхал. Поэтому я согласен."
    },
    {
        "timestamp": [
            6629.48,
            6629.98
        ],
        "text": " Как опытный пользователь уже два года, я полностью с этим согласен."
    },
    {
        "timestamp": [
            6631.34,
            6632.42
        ],
        "text": " Это расслабляет, безусловно."
    },
    {
        "timestamp": [
            6635.52,
            6636.88
        ],
        "text": " Давайте посмотрим, как у нас return здесь будет работать."
    },
    {
        "timestamp": [
            6641.24,
            6646.18
        ],
        "text": " Return в генераторе работает только один раз при возвращении всех итераций. В нашем случае advanced генератором работает когда каран станет больше или равен стоп"
    },
    {
        "timestamp": [
            6646.18,
            6659.02
        ],
        "text": " так окей ел а тоже ел карант все я и что-то попал немножко значит смотрите давайте от"
    },
    {
        "timestamp": [
            6659.02,
            6668.86
        ],
        "text": " начала до конца как эта штука будет работать на скрине все расскажу еще разочек."
    },
    {
        "timestamp": [
            6670.34,
            6670.66
        ],
        "text": " Полная аннотация типов."
    },
    {
        "timestamp": [
            6671.66,
            6671.76
        ],
        "text": " Собственно, чем она хороша?"
    },
    {
        "timestamp": [
            6673.22,
            6675.12
        ],
        "text": " Тем, что она сразу говорит,"
    },
    {
        "timestamp": [
            6677.04,
            6678.0
        ],
        "text": " описывает все об этом генераторе."
    },
    {
        "timestamp": [
            6680.74,
            6682.4
        ],
        "text": " Значит, во-первых, вот этот генератор – это то, что импортируется из тайпинга."
    },
    {
        "timestamp": [
            6684.0,
            6687.64
        ],
        "text": " Внутри у нас есть три позиции, которые можно описать."
    },
    {
        "timestamp": [
            6688.2,
            6689.4
        ],
        "text": " Я обычно описывал одну."
    },
    {
        "timestamp": [
            6690.32,
            6694.72
        ],
        "text": " Один раз я тоже поймал ошибку, как у Ильи, но вроде он всегда работал с одной."
    },
    {
        "timestamp": [
            6695.38,
            6698.34
        ],
        "text": " Но полная аннотация типов здесь требует три параметра."
    },
    {
        "timestamp": [
            6699.36,
            6702.7
        ],
        "text": " Параметр номер один – это то, что будет yield."
    },
    {
        "timestamp": [
            6703.16,
            6709.0
        ],
        "text": " То есть то, что он отдает на каждой генерации на каждой трации или на"
    },
    {
        "timestamp": [
            6709.0,
            6719.2
        ],
        "text": " каждой генерации на второе это сент-тайп это то что мы можем задать как настройку допустим мы могли бы"
    },
    {
        "timestamp": [
            6719.2,
            6729.06
        ],
        "text": " написать версию где бы были настройки 1 2 3 4 5 непонятно но это были бы энт инкаджер у нас строки на типа дубал"
    },
    {
        "timestamp": [
            6729.06,
            6737.34
        ],
        "text": " складку то есть то что можно задать наружу как какую-то опцию или настройку и третье это return"
    },
    {
        "timestamp": [
            6737.34,
            6770.38
        ],
        "text": " type я не уверен но нужен ли return или нет может быть иногда в каких-то кейсах нужен. Это то, что вернется в самом конце. В самом-самом конце, когда генератор будет остановлен. Остановлен – это то, что отдастся последним. То есть, return – это то, что отдастся последним один раз. В самом конце. Здесь мы имеем аннотацию «генератор». То, что вот эта функция отдает генератор сразу проаннотировано тут"
    },
    {
        "timestamp": [
            6770.38,
            6775.9
        ],
        "text": " у нас интегр это елтайп селтайп интегр"
    },
    {
        "timestamp": [
            6790.32,
            6807.82
        ],
        "text": " то есть каждый раз он будет генерировать какое число сентайп у нас строка это будет означать то что настройки мы можем задавать в виде строк и return type float дробное число в первом генераторе у нас идет non-non. То есть настройки он не принимает, return у него нет."
    },
    {
        "timestamp": [
            6808.94,
            6810.88
        ],
        "text": " А первая позиция идет non-tom."
    },
    {
        "timestamp": [
            6811.64,
            6812.9
        ],
        "text": " А здесь же все три есть."
    },
    {
        "timestamp": [
            6813.66,
            6820.16
        ],
        "text": " Ну и, собственно, здесь мы определяем переменную current, текущее значение."
    },
    {
        "timestamp": [
            6821.24,
            6823.22
        ],
        "text": " И говорим current равно start."
    },
    {
        "timestamp": [
            6823.66,
            6824.4
        ],
        "text": " Это на старте."
    },
    {
        "timestamp": [
            6827.86,
            6836.44
        ],
        "text": " Хотя, как мне кажется, это можно было бы и без определения делать ну окей делаем цикл пока current меньше стопа а стоп это соответственно финишная"
    },
    {
        "timestamp": [
            6836.44,
            6848.62
        ],
        "text": " позиция пытаемся получить команду от пользов Это важно, потому что команда может быть задана сразу же при создании генератора до итерации."
    },
    {
        "timestamp": [
            6849.62,
            6853.14
        ],
        "text": " Мы говорим команда равно yield."
    },
    {
        "timestamp": [
            6856.14,
            6860.82
        ],
        "text": " Команда равно yield – это попытка как раз-таки получить команду."
    },
    {
        "timestamp": [
            6862.14,
            6862.9
        ],
        "text": " Здесь."
    },
    {
        "timestamp": [
            6860.82,
            6862.26
        ],
        "text": " получить команду."
    },
    {
        "timestamp": [
            6862.9,
            6866.24
        ],
        "text": " Здесь."
    },
    {
        "timestamp": [
            6869.2,
            6869.38
        ],
        "text": " Ну и также нам нужно этим yield описать,"
    },
    {
        "timestamp": [
            6872.14,
            6873.0
        ],
        "text": " что, собственно, мы будем отдавать наружу."
    },
    {
        "timestamp": [
            6877.04,
            6878.64
        ],
        "text": " Поэтому у нас идет command равно yield current."
    },
    {
        "timestamp": [
            6881.72,
            6885.1
        ],
        "text": " Получается, что мы в одну строку делаем две операции, и, возможно, сейчас я попрошу робота расписать эту штуку на две строки"
    },
    {
        "timestamp": [
            6885.1,
            6892.12
        ],
        "text": " если есть такая опция вообще я не уверен честно говоря будет ли она но в данном случае мы получается"
    },
    {
        "timestamp": [
            6892.12,
            6908.4
        ],
        "text": " одновременно с вами и отдаем значение наружу если она требуется и слушаем входящий сигнал если человек хочет перенастроить этот генератор таким образом он может ничего не передать"
    },
    {
        "timestamp": [
            6908.4,
            6915.3
        ],
        "text": " а просто запустить генерацию мы проверяем команда дубль была не была скот была не была куб была не"
    },
    {
        "timestamp": [
            6915.3,
            6926.16
        ],
        "text": " была ничего не было мы просто делаем каран плюс 1 и делаем елд. Была команда."
    },
    {
        "timestamp": [
            6927.28,
            6930.28
        ],
        "text": " Соответственно, она через специальный метод отправляется."
    },
    {
        "timestamp": [
            6930.88,
            6932.0
        ],
        "text": " У нас есть опция."
    },
    {
        "timestamp": [
            6932.28,
            6934.52
        ],
        "text": " Мы принимаем строки как команды."
    },
    {
        "timestamp": [
            6935.36,
            6936.72
        ],
        "text": " Команда ли была дубль?"
    },
    {
        "timestamp": [
            6937.34,
            6937.58
        ],
        "text": " Нет."
    },
    {
        "timestamp": [
            6937.96,
            6938.3
        ],
        "text": " Squad?"
    },
    {
        "timestamp": [
            6938.62,
            6938.9
        ],
        "text": " Нет."
    },
    {
        "timestamp": [
            6939.22,
            6939.48
        ],
        "text": " Cube?"
    },
    {
        "timestamp": [
            6939.98,
            6940.2
        ],
        "text": " Да."
    },
    {
        "timestamp": [
            6940.78,
            6944.96
        ],
        "text": " Мы производим уже тогда возведение следующего числа в cube."
    },
    {
        "timestamp": [
            6944.96,
            6946.02
        ],
        "text": " Да, мы производим уже тогда возведение следующего числа в куб."
    },
    {
        "timestamp": [
            6950.32,
            6951.4
        ],
        "text": " Человек дал команду и запустил следующую итерацию."
    },
    {
        "timestamp": [
            6954.4,
            6954.74
        ],
        "text": " Наш генератор остановился на единичке,"
    },
    {
        "timestamp": [
            6956.68,
            6957.94
        ],
        "text": " и эту единичку он уже будет возводить в куб."
    },
    {
        "timestamp": [
            6960.56,
            6960.82
        ],
        "text": " Человек может поменять команду, может не поменять,"
    },
    {
        "timestamp": [
            6963.86,
            6963.96
        ],
        "text": " сказать дальше, дальше, дальше, пять итераций сделать,"
    },
    {
        "timestamp": [
            6966.06,
            6973.68
        ],
        "text": " потом говорит, окей, хочу дубли делать. И, и общий наш генератор будет умножать то есть он будет делать то что мы скажем столько раз"
    },
    {
        "timestamp": [
            6973.68,
            7052.64
        ],
        "text": " сколько мы скажем оперативно отдавая значение по очереди когда мы просим давайте вот эту опцию узнаем, есть ли у нас момент такой, что мы можем вот это описать в двух строках. Так, что ж. такое иногда ловится и причем еще какой-то более сложный сделал так тем более сложно сделал. Так."
    },
    {
        "timestamp": [
            7053.24,
            7057.12
        ],
        "text": " Ладно."
    },
    {
        "timestamp": [
            7059.04,
            7061.04
        ],
        "text": " О, моржовый оператор."
    },
    {
        "timestamp": [
            7063.6,
            7063.72
        ],
        "text": " Он же это, вот второй раз,"
    },
    {
        "timestamp": [
            7065.92,
            7066.18
        ],
        "text": " один раз нам его показали в самом начале,"
    },
    {
        "timestamp": [
            7068.54,
            7068.7
        ],
        "text": " и с тех пор вообще никто не видел,"
    },
    {
        "timestamp": [
            7070.38,
            7072.48
        ],
        "text": " и не применяли, и вообще ничего."
    },
    {
        "timestamp": [
            7074.26,
            7074.62
        ],
        "text": " Я о нем узнал недавно."
    },
    {
        "timestamp": [
            7077.3,
            7079.3
        ],
        "text": " Я вам честно скажу, я такой, о, прикольная штука."
    },
    {
        "timestamp": [
            7083.62,
            7084.58
        ],
        "text": " Ну, типа, 4 года я без него прожил, и норм."
    },
    {
        "timestamp": [
            7087.64,
            7088.94
        ],
        "text": " Смотрел варианты, как это работает, но..."
    },
    {
        "timestamp": [
            7092.06,
            7092.16
        ],
        "text": " Ну, то есть это еще один такой, я не знаю,"
    },
    {
        "timestamp": [
            7094.1,
            7094.24
        ],
        "text": " я даже не могу называть это синтетическим сакером,"
    },
    {
        "timestamp": [
            7099.48,
            7100.4
        ],
        "text": " просто упрощенная запись при присваивании, наверное."
    },
    {
        "timestamp": [
            7101.56,
            7102.88
        ],
        "text": " Можем сейчас сгенерить. А где он промелькнул-то?"
    },
    {
        "timestamp": [
            7101.56,
            7101.88
        ],
        "text": " Можем сейчас сгенерить."
    },
    {
        "timestamp": [
            7102.84,
            7104.12
        ],
        "text": " А где он промелькнул-то?"
    },
    {
        "timestamp": [
            7105.78,
            7106.78
        ],
        "text": " Well, current..."
    },
    {
        "timestamp": [
            7111.78,
            7118.98
        ],
        "text": " В самом начале, при присвоении... На скриншоте, да, где-то он, по-моему, был?"
    },
    {
        "timestamp": [
            7120.3,
            7121.5
        ],
        "text": " Где-то был."
    },
    {
        "timestamp": [
            7121.5,
            7128.38
        ],
        "text": " где-то был."
    },
    {
        "timestamp": [
            7130.38,
            7132.22
        ],
        "text": " После объявления функции он присвоил"
    },
    {
        "timestamp": [
            7132.22,
            7133.94
        ],
        "text": " current to start вот этим"
    },
    {
        "timestamp": [
            7133.94,
            7136.34
        ],
        "text": " операторам."
    },
    {
        "timestamp": [
            7136.42,
            7137.42
        ],
        "text": " Ну, неважно."
    },
    {
        "timestamp": [
            7205.76,
            7206.46
        ],
        "text": " Теоретически вроде у нас два yield может быть. Говорит, что это можно записать более наглядно в несколько строк. Ну, такая вот альтернативная версия. Давайте сейчас посмотрим. Значит, тут также старт-стоп, генератор int str float, current значение стартовое, пока стартовое значение меньше стопа."
    },
    {
        "timestamp": [
            7208.76,
            7211.16
        ],
        "text": " Отдаем текущее значение."
    },
    {
        "timestamp": [
            7215.32,
            7216.6
        ],
        "text": " Текущее значение равно current, yield current."
    },
    {
        "timestamp": [
            7217.64,
            7219.4
        ],
        "text": " Так."
    },
    {
        "timestamp": [
            7222.54,
            7223.44
        ],
        "text": " Почему мы не можем сделать просто yield current?"
    },
    {
        "timestamp": [
            7224.04,
            7224.6
        ],
        "text": " Вопрос."
    },
    {
        "timestamp": [
            7224.94,
            7289.36
        ],
        "text": " Ну ладно. Получаем команду от пользователя. Command равно yieldExpressionValue. Оно не определено. Вероятно, это ошибка, и он просто сделал то, что я просил его. Вернулся назад. стараются угодить сейчас меньше уже но допустим чат gpt он вообще просто год назад еще галлюцинировать"
    },
    {
        "timestamp": [
            7289.36,
            7296.02
        ],
        "text": " придумывая то что вы хотите от него услышать потом извини когда его в этом увеличаешь он извиняется и"
    },
    {
        "timestamp": [
            7296.02,
            7309.78
        ],
        "text": " идет на следующий заход но сонет к сожалению похоже тоже раз не был уверен и просто написал что-то просто я смотрю что откуда бы здесь"
    },
    {
        "timestamp": [
            7309.78,
            7314.88
        ],
        "text": " елт expression взяться на если это как переменная которая вообще не была определена"
    },
    {
        "timestamp": [
            7349.42,
            7405.28
        ],
        "text": " Мне интересно, как работает эта двухсторонняя связь. Вероятно, какой-то механизм есть сейчас. На минутку здесь перестановимся, но потом пойдем дальше. Обмен данными в обе стороны. Окей, генератор отдает значение получить значение через next отправить через цент Ну, мы просто будем итераторы писать, и, вероятно, фигня удаляем здесь можно описать запуск вот этой штуковины"
    },
    {
        "timestamp": [
            7501.06,
            7503.12
        ],
        "text": " Получим самые странные числа на самом деле. Можно сделать сначала через Next, наверное. Пошлем команду дубль так короче Сделаем две операции. Пошлем команду кип и можем сделать вообще цикл дальше"
    },
    {
        "timestamp": [
            7503.28,
            7508.88
        ],
        "text": " И можем сделать вообще цикл дальше."
    },
    {
        "timestamp": [
            7511.4,
            7511.48
        ],
        "text": " Как это будет работать, спросите вы."
    },
    {
        "timestamp": [
            7514.78,
            7517.32
        ],
        "text": " Я скажу, что у нас всего заказано 10 итераций."
    },
    {
        "timestamp": [
            7521.62,
            7522.14
        ],
        "text": " Первые две будут вызваны next."
    },
    {
        "timestamp": [
            7525.88,
            7528.22
        ],
        "text": " Остальное цикл, оставшиеся 8 отработает цикл."
    },
    {
        "timestamp": [
            7533.3,
            7533.36
        ],
        "text": " Если бы мы хотели в цикле это делать, мы бы могли это сделать в цикле,"
    },
    {
        "timestamp": [
            7534.78,
            7535.36
        ],
        "text": " но пришлось бы делать ветвление."
    },
    {
        "timestamp": [
            7538.66,
            7539.32
        ],
        "text": " Ну, допустим, написать бесконечный цикл какой-нибудь,"
    },
    {
        "timestamp": [
            7544.84,
            7546.82
        ],
        "text": " или просто for написать, и на каждой итерации цикла пользователя просить ввести команду, перенастроить."
    },
    {
        "timestamp": [
            7546.92,
            7548.34
        ],
        "text": " Здесь у нас такой упрощенный вариант."
    },
    {
        "timestamp": [
            7549.6,
            7552.0
        ],
        "text": " То есть мы и в for можем делать вот это."
    },
    {
        "timestamp": [
            7552.36,
            7556.36
        ],
        "text": " Gen send и записывать туда какие-то команды."
    },
    {
        "timestamp": [
            7557.06,
            7559.96
        ],
        "text": " Здесь же мы можем более жестко поступать с командами."
    },
    {
        "timestamp": [
            7560.38,
            7563.14
        ],
        "text": " Если команда не входит в список допустимых команд,"
    },
    {
        "timestamp": [
            7563.14,
            7579.52
        ],
        "text": " то есть собственный exception здесь вызвать, ну типа не впихивай то, что сюда не должно поступать. У нас такого нет. То есть если пользователь в данном случае впишет несуществующую команду, которую мы не можем обработать, у нас будет просто плюс один делаться."
    },
    {
        "timestamp": [
            7588.78,
            7589.18
        ],
        "text": " А, извините, здесь у нас не 10 итераций, это же не range."
    },
    {
        "timestamp": [
            7591.56,
            7592.16
        ],
        "text": " Здесь у нас вообще просто максимальное число 10."
    },
    {
        "timestamp": [
            7594.0,
            7596.0
        ],
        "text": " Поэтому я здесь сделаю..."
    },
    {
        "timestamp": [
            7600.84,
            7711.64
        ],
        "text": " Давайте сделаем 100 тысяч, ну или 10 тысяч. Тут прикол-то в том, что у нас последнее, что я оставил, это куб. Возведение в куб. Поэтому это достаточно за короткое количество итераций будет сделано. 10 тысяч можно будет очень быстро добиться. Поэтому я сейчас эту штуку запущу. Так он погодите 68 строчка, что-то там осталось. А, 100 итерейшн остался. Окей. Играем его. Так, новенькая что-то, 94 строчка. Can't send non-value to just started generation. Серьезно? Я думал, так можно. Он говорит, что не может послать мою команду, мое значение в только что запущенный генератор. Вообще я ожидал, что можно будет. Хочу разобраться с этим. Давайте я генератор вам закину вместе с запуском в чат, потому что я шибко много это все кручу. И сейчас попробуем разобраться с тем, что происходит."
    },
    {
        "timestamp": [
            7713.36,
            7713.52
        ],
        "text": " Ну, все просто вроде."
    },
    {
        "timestamp": [
            7718.54,
            7720.92
        ],
        "text": " Не хочет принимать на нулевой итерации команды."
    },
    {
        "timestamp": [
            7723.94,
            7724.02
        ],
        "text": " Так, может быть, у меня будет какой-то генератор,"
    },
    {
        "timestamp": [
            7746.54,
            7753.64
        ],
        "text": " который я хотел бы сразу настроить, его поведение. Почему нет? Для корректной работы с send генератор нужно сначала инициализировать его с помощью next или send none. Вот правильный порядок. Сначала next или send none теперь send double так он же прогонит"
    },
    {
        "timestamp": [
            7753.64,
            7754.14
        ],
        "text": " первую"
    },
    {
        "timestamp": [
            7754.14,
            7756.18
        ],
        "text": " вот"
    },
    {
        "timestamp": [
            7756.18,
            7759.04
        ],
        "text": " а я говорю что вот"
    },
    {
        "timestamp": [
            7759.04,
            7761.48
        ],
        "text": " а если бы мне надо было бы сразу его сконфигурировать"
    },
    {
        "timestamp": [
            7761.48,
            7763.2
        ],
        "text": " поэтому заинтересовался"
    },
    {
        "timestamp": [
            7763.2,
            7765.98
        ],
        "text": " как сразу настройку задать."
    },
    {
        "timestamp": [
            7769.54,
            7771.86
        ],
        "text": " Создание генератора код не выполняется."
    },
    {
        "timestamp": [
            7772.0,
            7774.46
        ],
        "text": " Инициализация код выполняется до первого yield."
    },
    {
        "timestamp": [
            7775.58,
            7778.42
        ],
        "text": " То есть у нас есть опция сделать send none."
    },
    {
        "timestamp": [
            7778.7,
            7779.86
        ],
        "text": " Ну, давайте попробуем."
    },
    {
        "timestamp": [
            7794.7,
            7909.26
        ],
        "text": " важный технический момент генераторов python при создании генератора код внутри функции еще не выполнялся первый вызов next или сентнан запускает код до 1 елт то есть нам важно, получается, добраться до первого Yield, чтобы настраивать. Только после этого генератор готов принимать значения через Send. Окей, значит, я логику запуска перепишу немножечко. Подпишу, что это создание генератора. Ну и дальше инициализация. поэтому я сделаю сначала генсен хочу попробовать да может быть не реально важно настроить его самого начала а потом отправлять тоже может что-то правля туда уже дубли Ну, вроде работает, по крайней мере, не ругается. Ну, это самое главное. Так, gen, send, none. None подчеркивается. Дело в том, что, вероятно, здесь пронотировано это как str."
    },
    {
        "timestamp": [
            7910.92,
            7911.94
        ],
        "text": " Send type."
    },
    {
        "timestamp": [
            7912.46,
            7915.36
        ],
        "text": " То есть я должен поставить опциональный none."
    },
    {
        "timestamp": [
            7919.88,
            7921.64
        ],
        "text": " Да, похоже, что так."
    },
    {
        "timestamp": [
            7921.88,
            7965.06
        ],
        "text": " Теперь на none он не ругается, и я могу в жук запустить. Достаточно быстро добрались до 10 тысяч. Ну, как, относительно, да. Вероятно, если бы я сделал несколько раз дубль, то это было бы еще быстрее. Или вот так, да, допустим. Так, гораздо быстрее. Еще один куб, и вообще будет 2-3 итерации."
    },
    {
        "timestamp": [
            7967.76,
            7973.06
        ],
        "text": " О, надо же не send делать, да?"
    },
    {
        "timestamp": [
            7976.5,
            7981.84
        ],
        "text": " Так, слушайте, давайте посмотрим, будут ли команды что-то менять."
    },
    {
        "timestamp": [
            7984.68,
            8005.04
        ],
        "text": " То есть делает ли команда перерасчет или команда – это просто настройка для следующего захода. То есть будет ли несколько ген send cube делать перерасчет значений."
    },
    {
        "timestamp": [
            8028.28,
            8039.38
        ],
        "text": " дебаггер по-хорошему запустить бы но у меня с ним какие-то проблемы после множественных обновлений плагина плагинов для python vs коде так каждый раз ген сен кьюб будет измечать значение карант"
    },
    {
        "timestamp": [
            8039.38,
            8043.1
        ],
        "text": " возводя его в куб окей"
    },
    {
        "timestamp": [
            8099.06,
            8109.82
        ],
        "text": " ok степан пишет решил поэкспериментировать и все сразу через цикл сделать это прикольно что пока работает цикл метод так скажем открыт так так так давайте посмотрим команд был first value next Давайте посмотрим. send команд поманс g я завис сколько и тратит а здесь его возможно у тебя же получается три команды и send команд же закончится на третьем дальше по идее будет индексы рог то есть индексы списка с"
    },
    {
        "timestamp": [
            8109.82,
            8125.2
        ],
        "text": " командами кончатся и т.д. плюс один типа 0 1 2 и потом лист 3ексировал. Три итерации."
    },
    {
        "timestamp": [
            8125.3,
            8127.38
        ],
        "text": " Да."
    },
    {
        "timestamp": [
            8128.44,
            8131.18
        ],
        "text": " Да, прикольно."
    },
    {
        "timestamp": [
            8133.9,
            8134.14
        ],
        "text": " С эксперимента это хорошо, определенно."
    },
    {
        "timestamp": [
            8136.82,
            8136.94
        ],
        "text": " Потому что вы начинаете что-то писать, пробовать,"
    },
    {
        "timestamp": [
            8140.32,
            8141.44
        ],
        "text": " по-другому это называть, какие-то новые ошибочки ловить, возможно."
    },
    {
        "timestamp": [
            8142.26,
            8142.42
        ],
        "text": " Это отлично. Я не понимаю."
    },
    {
        "timestamp": [
            8144.42,
            8155.0
        ],
        "text": " Mortal Kombat. Так. это мой мой mortal kombat так его иван у тебя включен микрофон выключай или или ты нам про"
    },
    {
        "timestamp": [
            8155.0,
            8199.16
        ],
        "text": " mortal kombat ну наверно нет окей значит попробую пожил ли у меня дебаггер. Хотелось бы подтыкать это все в отладчике. Ожил, отлично. Умирал он дней на 5, но столько обновлений приходило плагинов, что вряд ли ожил. Так. Вот здесь я ставлю точку остановки, запускаю это еще разочек."
    },
    {
        "timestamp": [
            8202.42,
            8204.9
        ],
        "text": " Ген – это генератор object. Окей."
    },
    {
        "timestamp": [
            8206.8,
            8208.1
        ],
        "text": " Пойдем потихонечку внутрь."
    },
    {
        "timestamp": [
            8211.86,
            8212.6
        ],
        "text": " Стартовая позиция 0, stop – 10 тысяч."
    },
    {
        "timestamp": [
            8213.64,
            8214.58
        ],
        "text": " Объявляется цикл."
    },
    {
        "timestamp": [
            8215.78,
            8220.4
        ],
        "text": " Назначается current."
    },
    {
        "timestamp": [
            8224.22,
            8224.3
        ],
        "text": " Вероятно, вот почему важно инициализировать генератор,"
    },
    {
        "timestamp": [
            8227.58,
            8230.06
        ],
        "text": " потому что, допустим, даже команда была не назначена."
    },
    {
        "timestamp": [
            8238.38,
            8241.38
        ],
        "text": " И вот инициализация произошла, генератор продолжает свою жизнь, переменные локальной области видимости определены. Я так понимаю, именно поэтому важно было его инициализировать."
    },
    {
        "timestamp": [
            8243.46,
            8248.94
        ],
        "text": " И вот теперь мы его настраиваем мы говорим дубль при дубле у нас"
    },
    {
        "timestamp": [
            8248.94,
            8266.06
        ],
        "text": " делается дубль 0 на 2 и толку в этом нет и у нас все равно current 0 потом мы делаем единичку, плюс 1, отрабатывает."
    },
    {
        "timestamp": [
            8266.78,
            8268.78
        ],
        "text": " Current 1."
    },
    {
        "timestamp": [
            8273.06,
            8278.86
        ],
        "text": " И делаем эту единичку возведения в куб."
    },
    {
        "timestamp": [
            8280.16,
            8280.62
        ],
        "text": " Тоже 1."
    },
    {
        "timestamp": [
            8283.38,
            8312.96
        ],
        "text": " Поэтому с математикой у меня проблема. И нужно было сделать несколько next обычных. Допустим, чтобы троечка была. Потом эту троечку можно было бы возвести в куб. Давайте так вот сделаем. И там бы уже дело пошло. Даже вот тут дубль, потом куб. и в цикле бы работы гораздо меньше было можно так сделать и"
    },
    {
        "timestamp": [
            8312.96,
            8314.1
        ],
        "text": " перезапустить это"
    },
    {
        "timestamp": [
            8326.24,
            8329.84
        ],
        "text": " единичка"
    },
    {
        "timestamp": [
            8408.02,
            8408.58
        ],
        "text": " . троечка каран теперь тройка и вот шестерку взойдет куб и получится 216 вопрос что будет дальше Мы идем в цикл. Команды мы не меняем. Да, команда, получается, у нас будет ожидаться каждый раз. Так как в этот раз мы команду не назначили, он будет делать плюс один. 218, 219. В общем, неинтересно. Поэтому здесь мы могли бы делать не куб, а дубль, допустим. Вместо вот этогоил было бы поставить send print"
    },
    {
        "timestamp": [
            8412.12,
            8412.56
        ],
        "text": " нен"
    },
    {
        "timestamp": [
            8490.44,
            8506.96
        ],
        "text": " сюда это хорошо просто куда куда сюда можем ли мы это так сделать так нет нельзя нельзя принц надо сработало print jensenил секундочку уже print это будет немножко не то как мне кажется эта штука она не будет нормально работать. Знаете почему? Потому что мы итерируемся по генератору,"
    },
    {
        "timestamp": [
            8507.02,
            8509.94
        ],
        "text": " и цикл for его просит дай еще,"
    },
    {
        "timestamp": [
            8510.68,
            8513.74
        ],
        "text": " и мы тоже в принте просим дай еще."
    },
    {
        "timestamp": [
            8514.4,
            8516.92
        ],
        "text": " То есть оно не будет работать, к сожалению."
    },
    {
        "timestamp": [
            8518.1,
            8520.18
        ],
        "text": " Можно сделать это иным способом."
    },
    {
        "timestamp": [
            8520.18,
            8522.62
        ],
        "text": " Можно попробовать сделать это через цикл while."
    },
    {
        "timestamp": [
            8523.92,
            8552.0
        ],
        "text": " Короче, да? Секундочку. А что мы хотим добиться? Вот он мне напечатал, там, выбил 14, 30, ну, там, неважно. Какой-то ряд цифр. Окей. Илья, смотри, получается, ты, ну, представь, что ты делаешь цикл for полу списку чисел не так да подожди"
    },
    {
        "timestamp": [
            8552.0,
            8566.2
        ],
        "text": " список цикл for по range и говоришь я хочу сделать 10 итераций цикла for for число in range от 0 до 10. И ты получаешь 10 итераций."
    },
    {
        "timestamp": [
            8566.98,
            8568.46
        ],
        "text": " 0, 1, 2, 3, 4."
    },
    {
        "timestamp": [
            8568.7,
            8572.72
        ],
        "text": " То есть ты получаешь значение из генератора range."
    },
    {
        "timestamp": [
            8573.8,
            8576.0
        ],
        "text": " А здесь же ты, получается, говоришь,"
    },
    {
        "timestamp": [
            8579.0,
            8582.1
        ],
        "text": " что ты делаешь цикл по генератору,"
    },
    {
        "timestamp": [
            8582.16,
            8584.4
        ],
        "text": " for число in range."
    },
    {
        "timestamp": [
            8585.16,
            8589.28
        ],
        "text": " При этом одновременно ты изменяешь сам генератор"
    },
    {
        "timestamp": [
            8589.28,
            8590.94
        ],
        "text": " на каждой итерации,"
    },
    {
        "timestamp": [
            8591.08,
            8594.34
        ],
        "text": " то есть как, не знаю, змея кусающаяся за хвост."
    },
    {
        "timestamp": [
            8594.34,
            8597.52
        ],
        "text": " То есть это работа с коллекцией,"
    },
    {
        "timestamp": [
            8597.56,
            8601.32
        ],
        "text": " одновременно по которой ты итерируешься циклом."
    },
    {
        "timestamp": [
            8601.64,
            8604.26
        ],
        "text": " Это не очень хорошая история, как мне кажется."
    },
    {
        "timestamp": [
            8604.9,
            8606.54
        ],
        "text": " И лучше описать это через"
    },
    {
        "timestamp": [
            8606.54,
            8645.06
        ],
        "text": " что-то такое допустим либо while true либо можно сделать попробовать while джин то есть мы не привязываемся циклом к императору, который изменяем в этот момент, когда империруемся. Очень странная история, но я не уверен, что оно вообще адекватно будет работать, даже если код будет запускаться. Тут будет зависеть от того, что хочется увидеть, получить."
    },
    {
        "timestamp": [
            8655.84,
            8656.66
        ],
        "text": " Так."
    },
    {
        "timestamp": [
            8660.66,
            8661.66
        ],
        "text": " Пам-пам."
    },
    {
        "timestamp": [
            8662.76,
            8663.76
        ],
        "text": " Так, это что такое?"
    },
    {
        "timestamp": [
            8696.86,
            8725.34
        ],
        "text": " Какие-то странные терминалы открываются. червочек но тогда можно сделать while true. Или быть хитрее, и чтобы эта штука отдавала false в конце. Таким образом, я здесь дам bool. И тогда я смогу сделать вот так в аль джан"
    },
    {
        "timestamp": [
            8731.16,
            8732.84
        ],
        "text": " здесь сделать принт конец"
    },
    {
        "timestamp": [
            8770.38,
            8777.62
        ],
        "text": " Так. Ладно. Смотрите, какая идея у меня была. Не очень удачная, похоже. Я решил его модифицировать так, чтобы в конце он отдавал булевое значение. False. Пронатировал это, что return отдает булл. И сказал пока генератор. Э эта штука великолепно работает с списками допустим мы можем удалять по одному элементу списка и сказать пока список из этого же списка удалять"
    },
    {
        "timestamp": [
            8777.62,
            8785.58
        ],
        "text": " по одному элементу на каждой итерации печатая допустим через, в конце концов список перестает существовать,"
    },
    {
        "timestamp": [
            8785.68,
            8788.28
        ],
        "text": " отдает false, и цикл завершается."
    },
    {
        "timestamp": [
            8789.08,
            8791.94
        ],
        "text": " Я подумал, почему бы не сделать это же с генератором."
    },
    {
        "timestamp": [
            8793.36,
            8795.9
        ],
        "text": " Потом я понял, что в конце он не отдает,"
    },
    {
        "timestamp": [
            8797.9,
            8801.3
        ],
        "text": " то есть он не настроен, он не отдает в конце false."
    },
    {
        "timestamp": [
            8802.18,
            8804.16
        ],
        "text": " Вероятно, поэтому цикл не останавливается."
    },
    {
        "timestamp": [
            8809.66,
            8819.68
        ],
        "text": " Я сделал, чтобы он отдавал в конце false но при этом все равно не останавливается все равно бесконечный цикл по какой-то причине вероятно"
    },
    {
        "timestamp": [
            8819.68,
            8825.02
        ],
        "text": " это не получится настроить так как хочется может, только через класс иператор."
    },
    {
        "timestamp": [
            8825.82,
            8828.1
        ],
        "text": " Но здесь, увы, это не получилось."
    },
    {
        "timestamp": [
            8828.54,
            8833.3
        ],
        "text": " Поэтому если делать такую штуку, то придется делать в конце break."
    },
    {
        "timestamp": [
            8834.68,
            8836.66
        ],
        "text": " Вот так. Тогда это будет работать."
    },
    {
        "timestamp": [
            8839.32,
            8844.24
        ],
        "text": " Получается, что каждый раз мы делаем попытку сделать print next gen."
    },
    {
        "timestamp": [
            8844.6,
            8848.46
        ],
        "text": " При этом вместо этого, конечно же, может быть отправка команды."
    },
    {
        "timestamp": [
            8850.08,
            8850.52
        ],
        "text": " Send."
    },
    {
        "timestamp": [
            8852.64,
            8853.86
        ],
        "text": " Ну, допустим, cube."
    },
    {
        "timestamp": [
            8855.24,
            8856.96
        ],
        "text": " Чтобы она быстрее закончилась."
    },
    {
        "timestamp": [
            8861.36,
            8953.02
        ],
        "text": " Здесь у нас идет обработка exception-stop iteration. Как только у нас вся эта штука закончится, мы получим stop iteration, и чтобы не упасть от этой ошибки, мы этот exception обрабатываем. Значит, у нас итератор закончит свою работу. Я пишу конец и делаю break.к. Быстро он кончился, да, на самом деле. Так. Я бы вот эти вещи, честно говоря, закомментировал. 1 1 2 8 512 конец 512 кубе явно больше чем 10000 если нулей добавить еще получим чуть больше итерации"
    },
    {
        "timestamp": [
            8953.02,
            8959.02
        ],
        "text": " да ладно ну окей давайте сделаем дубль"
    },
    {
        "timestamp": [
            8998.78,
            9010.42
        ],
        "text": " ну да вот там и получили немножко задержали здесь но я думаю что на класса мы в любом случае сейчас успеем посмотреть так от чата я немножко отвлекся артем прислал скриншот а или . да если делать 1 сент это должен быть исключительно на если делать не сент то можно сделать просто next мы либо с вами автомобильия, она что-то не сформировалась до конца."
    },
    {
        "timestamp": [
            9011.86,
            9016.84
        ],
        "text": " То есть получается, либо нам нужно двигатель завести просто, либо завести и поехать."
    },
    {
        "timestamp": [
            9017.04,
            9020.3
        ],
        "text": " Но мы не сможем какие-то действия на автомобиле сделать до этого."
    },
    {
        "timestamp": [
            9022.46,
            9024.42
        ],
        "text": " Либо едем, либо просто заводим."
    },
    {
        "timestamp": [
            9032.48,
            9045.82
        ],
        "text": " Чтобы включился кондиционер допустим чтобы что-то произошло так я вас не просил отметиться но наверное сейчас попрошу то что advanced генератор у вас набран и протестирован. Я вижу, что Иван, Руслан, Артем, Степан."
    },
    {
        "timestamp": [
            9047.5,
            9048.42
        ],
        "text": " И все."
    },
    {
        "timestamp": [
            9049.48,
            9050.2
        ],
        "text": " Пока что."
    },
    {
        "timestamp": [
            9051.7,
            9053.72
        ],
        "text": " Попрошу здесь отметиться в этом месте."
    },
    {
        "timestamp": [
            9055.66,
            9056.26
        ],
        "text": " Екатерина."
    },
    {
        "timestamp": [
            9064.84,
            9128.34
        ],
        "text": " Так. так он или обеспечил счет волнировать you До 3 уводит это норм? Да, это нормально, потому что значение слишком быстро меняется. Можно сделать вместо куба дубль и попробовать увеличить число как я сделал тоже"
    },
    {
        "timestamp": [
            9128.34,
            9137.64
        ],
        "text": " вот в этом месте так так так где мы делаем 95 строка на вот здесь и создал генератор побольше"
    },
    {
        "timestamp": [
            9137.64,
            9149.72
        ],
        "text": " уже и в цикле передавал уже дубль они куб у меня получилось побольше несколько больше итераций здесь так"
    },
    {
        "timestamp": [
            9153.14,
            9161.3
        ],
        "text": " генератор как объект всегда будет оцениваться как true в условии while жаль а потому что он"
    },
    {
        "timestamp": [
            9161.3,
            9170.56
        ],
        "text": " существует как объект даже когда генератор исчерпан, сам объект генератора продолжает существовать, поэтому условие while gen всегда истина."
    },
    {
        "timestamp": [
            9171.32,
            9177.12
        ],
        "text": " Возвращаемое значение false из генератора return false не влияет на условия цикла."
    },
    {
        "timestamp": [
            9177.62,
            9182.32
        ],
        "text": " Это значение можно получить только при перехвате исключения stop iteration, собственно, что мы и сделали."
    },
    {
        "timestamp": [
            9252.68,
            9272.0
        ],
        "text": " исключение стопы трещин собственно что мы сделали технически возможно это можно сделать на классе оператора вроде бы Thank you. по идее через специальный метод был они подумал но что-то он не перес этого не дал делаем комит генератор на как у нас так генератор с"
    },
    {
        "timestamp": [
            9286.2,
            9287.38
        ],
        "text": " Я подпишу аннотацию типов таким образом и отправлю это на GitHub."
    },
    {
        "timestamp": [
            9288.8,
            9289.32
        ],
        "text": " Так, из чата выпал."
    },
    {
        "timestamp": [
            9290.06,
            9297.36
        ],
        "text": " Секундочку."
    },
    {
        "timestamp": [
            9299.46,
            9299.64
        ],
        "text": " На УП это тоже можно писать."
    },
    {
        "timestamp": [
            9301.3,
            9332.12
        ],
        "text": " Конечно, возможности там чуть больше. Получается, что то, что мы пишем, мы реализуем частные случаи итератора. То есть класса, у которого писан специальный метод iter. То есть генератор объекты – это на самом деле объекты с описанной логикой итер то есть елт возвращает итератор object мы их можем сами"
    },
    {
        "timestamp": [
            9332.12,
            9339.92
        ],
        "text": " написать на о пешечке но я думаю сейчас чего начать у нас остались генераторы однострочники"
    },
    {
        "timestamp": [
            9339.92,
            9347.26
        ],
        "text": " и пока как листком прихом шин только в круглых скобках и остался класс давайте класс давайте"
    },
    {
        "timestamp": [
            9347.26,
            9353.62
        ],
        "text": " класс перед завершением я просто покажу синтаксис а что такое практическое мы напишем в следующий раз"
    },
    {
        "timestamp": [
            9358.18,
            9359.74
        ],
        "text": " вот это я все убираю"
    },
    {
        "timestamp": [
            9362.68,
            9616.3
        ],
        "text": " она останется в комитах you you Thank you. Обычный класс. Ничего экзотического нет. Описаны специальные методы. Их нужно для минимального варианта описать 2 описать две штучки ну допустим что-нибудь простое. Класс, который возьмет при инициализации список и будет отдавать модификации. Модификации строк. you you я удалил код предыдущий он остался в комитах последнем комите он остался на гитхаблен уже был вроде бы. Давайте сейчас на всякий случай отправлю еще раз. итератора. Это iter, это то, что будет отдаваться на инициализации итератора, когда экземпляр этого класса будет помещен в цикл for. Впервые."
    },
    {
        "timestamp": [
            9652.5,
            9745.2
        ],
        "text": " на каждой итерации, когда цикл for будет говорить next, next, next, и что он будет получать. Немножко не то я хотел бы сделать, я хотел бы сделать коктейльчик. Смузи. Не знаю, как по-английски пишется. давайте знаете что делать значит from random don import choice а также from typing import generator вероятно нам это понадобится фрукт я хочу рандомный значит удаляем этот фрукт. Вот так, да? Это интересная мне подсветочка всего а всеножко не в том месте писал. Хорошо."
    },
    {
        "timestamp": [
            9758.94,
            9770.06
        ],
        "text": " Но перед этим мы сами Arising stop iteration. То есть здесь мы описываем логику итерации, что будет отдаваться"
    },
    {
        "timestamp": [
            9770.06,
            9778.56
        ],
        "text": " на каждом запросе из итерируемого объекта. То есть мы описываем собственный итерируемый объект."
    },
    {
        "timestamp": [
            9779.98,
            9785.44
        ],
        "text": " Этот итерируемый объект на инициализацию принимает список строк, в данном случае каких-то продуктов."
    },
    {
        "timestamp": [
            9786.18,
            9789.82
        ],
        "text": " И мы делаем из них коктейльчики."
    },
    {
        "timestamp": [
            9791.02,
            9793.1
        ],
        "text": " Ether возвращает self."
    },
    {
        "timestamp": [
            9794.22,
            9794.68
        ],
        "text": " Вот так."
    },
    {
        "timestamp": [
            9794.68,
            9802.42
        ],
        "text": " То есть когда происходит инициализация генератора, он возвращает сам себя."
    },
    {
        "timestamp": [
            9825.78,
            9831.78
        ],
        "text": " Он возвращает сам себя. Этот же экземпляр возвращает сам себя. Ссылку на себя же. Self без всяких прикрас. Просто вот такой return self. Когда мы говорим дай следующее, дай следующее. Не подправляю. Смузи неправильно. Давайте напишем правильно. Где у меня это используется?"
    },
    {
        "timestamp": [
            9833.38,
            9833.86
        ],
        "text": " Уже нигде, наверное."
    },
    {
        "timestamp": [
            9836.6,
            9839.18
        ],
        "text": " Уже нигде, да, похоже. Окей."
    },
    {
        "timestamp": [
            9846.34,
            9846.4
        ],
        "text": " Next, он вызывается, это тот специальный метод, который ищется у объекта,"
    },
    {
        "timestamp": [
            9848.36,
            9849.08
        ],
        "text": " когда мы вызываем функцию next."
    },
    {
        "timestamp": [
            9851.82,
            9853.84
        ],
        "text": " Или же когда цикл for вызывает."
    },
    {
        "timestamp": [
            9854.62,
            9855.32
        ],
        "text": " Или так, или так."
    },
    {
        "timestamp": [
            9858.32,
            9858.44
        ],
        "text": " Так как мы пишем class, собственный объект,"
    },
    {
        "timestamp": [
            9862.48,
            9862.52
        ],
        "text": " мы должны описать логику явно, конкретно,"
    },
    {
        "timestamp": [
            9866.18,
            9868.34
        ],
        "text": " в каких случаях у нас будет вызываться stop iteration и когда мы"
    },
    {
        "timestamp": [
            9875.18,
            9889.32
        ],
        "text": " циклу скажем дружище ты перебрал все этот объект и перри роман был перебран от начала до конца и уже остановись все больше ничего нет поэтому мы первым делом здесь проверяем что список опустел есть если not self products да если self products начинает возвращать"
    },
    {
        "timestamp": [
            9889.32,
            9901.26
        ],
        "text": " false мы делаем stop iteration в райзе остановится это месте если же там что-то есть мы делаем рандомный"
    },
    {
        "timestamp": [
            9901.26,
            9906.72
        ],
        "text": " choice удаляем этот элемент."
    },
    {
        "timestamp": [
            9909.64,
            9910.86
        ],
        "text": " Что может работать, наверное, не совсем правильно."
    },
    {
        "timestamp": [
            9912.22,
            9912.34
        ],
        "text": " Если у нас есть дубликаты."
    },
    {
        "timestamp": [
            9914.16,
            9915.36
        ],
        "text": " Но в целом, окей, ладно."
    },
    {
        "timestamp": [
            9917.86,
            9919.12
        ],
        "text": " Возвращаем коктейль из фруктиков."
    },
    {
        "timestamp": [
            9920.92,
            9921.4
        ],
        "text": " Сюда можно котлетку записать."
    },
    {
        "timestamp": [
            9922.0,
            9922.12
        ],
        "text": " Просто прикол."
    },
    {
        "timestamp": [
            9985.36,
            9994.24
        ],
        "text": " Значит, я создаю экземпляр. Давайтеруем у нас время уже подходит концу создаю здесь экземпляр коктейль генератора запихиваю туда фрукты и печатаю коктейльчики вот так получаю коктейль из груши коктейль из груши, коктейль из банана, из персика, из мандарин, из апельсина, из ананас. В общем, все в именительных падежах. Можно было бы принт облагородить. Допустим, фрукт, капиталайз, что-нибудь, не играть а это а внутри там что"
    },
    {
        "timestamp": [
            10048.34,
            null
        ],
        "text": " Груша использован. В общем, я думаю, что суть вы поняли. Мы с этого места с вами продолжим на следующем занятии. Напишем нормальный потом какой-нибудь итератор полезный. Посмотрим. Может быть попробуем описать логику send. Логику send. Для такого объекта. На этом сейчас будем заканчивать. У нас насыщенный денек. Вроде только генератор дано логики всякой разной мы посмотр можно написать через класс-итератор, допустим. Много текста, чтобы его можно было обрабатывать. А сейчас пока что завершаемся. Ну и до завтра. Завтра продолжу. Спасибо вам за активность на занятиях и всем до свидания. Конец сейчас сделаю."
    }
]